name: Build and Push to ECR

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials for ECR
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.ECR_PUSH_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ECR_PUSH_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up Docker tags
      id: docker-tags
      run: |
        REGISTRY="${{ steps.login-ecr.outputs.registry }}"
        SHA="${{ github.sha }}"
        BRANCH="${{ github.ref_name }}"
        
        # Always include the commit SHA
        TAGS="${REGISTRY}/hogtown-app:${SHA}"
        
        # Branch-specific tags
        if [ "$BRANCH" = "main" ]; then
          # Production tags
          TAGS="${TAGS},${REGISTRY}/hogtown-app:latest"
          TAGS="${TAGS},${REGISTRY}/hogtown-app:prod-${SHA:0:7}"
          TAGS="${TAGS},${REGISTRY}/hogtown-app:prod"
        elif [ "$BRANCH" = "develop" ]; then
          # Development tags
          TAGS="${TAGS},${REGISTRY}/hogtown-app:develop-latest"
          TAGS="${TAGS},${REGISTRY}/hogtown-app:develop-${SHA:0:7}"
          TAGS="${TAGS},${REGISTRY}/hogtown-app:develop"
        else
          # Feature branch or PR
          # Replace slashes with dashes for valid Docker tags
          SAFE_BRANCH=$(echo "$BRANCH" | sed 's/\//-/g')
          TAGS="${TAGS},${REGISTRY}/hogtown-app:${SAFE_BRANCH}-${SHA:0:7}"
        fi
        
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.docker-tags.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Force App Runner deployment
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          # Deploy to production
          SERVICE_NAME="hogtown-app"
          echo "Triggering production deployment..."
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          # Deploy to staging
          SERVICE_NAME="hogtown-staging"
          echo "Triggering staging deployment..."
        fi
        
        SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${SERVICE_NAME}'].ServiceArn" --output text)
        if [ ! -z "$SERVICE_ARN" ]; then
          echo "Triggering deployment for service: $SERVICE_ARN"
          aws apprunner start-deployment --service-arn $SERVICE_ARN
        else
          echo "Warning: Service ${SERVICE_NAME} not found"
        fi