name: CI

on:
  push:
    branches: [main, v2]
  pull_request:
    branches: [main, v2]

env:
  PYTHON_VERSION: '3.12'
  SECRET_KEY: django-insecure-test-key-for-ci-only
  DEBUG: False
  DATABASE_URL: sqlite:///test_db.sqlite3
  PROSOPO_SITE_KEY: test-site-key
  PROSOPO_SECRET_KEY: test-secret-key
  EMAIL_BACKEND: django.core.mail.backends.locmem.EmailBackend
  DEFAULT_FROM_EMAIL: test@example.com

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Check Django configuration
        run: |
          python manage.py check

      - name: Run migrations
        run: |
          python manage.py migrate

      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput

      - name: Run tests with coverage
        run: |
          coverage run --source='.' manage.py test
          coverage report --show-missing
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Run Django security check
        run: |
          python manage.py check --deploy

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff .

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run security checks with bandit
        run: |
          bandit -r . -x ./venv/,./test_*.py --severity-level medium

      - name: Check for known security vulnerabilities
        run: |
          safety check

