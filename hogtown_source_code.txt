HOGTOWN CATHOLIC - COMPLETE SOURCE CODE AND DOCUMENTATION
========================================================

Generated on: Tue Jun 10 11:25:42 EDT 2025

================================================================================
FILE: ./.claude/settings.local.json
================================================================================

{
  "permissions": {
    "allow": [
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(django-admin startproject:*)",
      "Bash(python manage.py startapp:*)",
      "Bash(mkdir:*)",
      "Bash(python manage.py:*)",
      "Bash(python3 manage.py migrate:*)",
      "Bash(python3 manage.py makemigrations:*)",
      "Bash(python3 manage.py check:*)",
      "Bash(git add:*)",
      "mcp__awslabs_core-mcp-server__prompt_understanding"
    ],
    "deny": []
  }
}

================================================================================
FILE: ./.github/workflows/ci.yml
================================================================================

name: CI

on:
  push:
    branches: [main, v2]
  pull_request:
    branches: [main, v2]

env:
  PYTHON_VERSION: "3.12"
  SECRET_KEY: django-insecure-test-key-for-ci-only
  DEBUG: False
  DATABASE_URL: sqlite:///test_db.sqlite3
  PROSOPO_SITE_KEY: test-site-key
  PROSOPO_SECRET_KEY: test-secret-key
  EMAIL_BACKEND: django.core.mail.backends.locmem.EmailBackend
  DEFAULT_FROM_EMAIL: test@example.com

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Check Django configuration
        run: |
          python manage.py check

      - name: Run migrations
        run: |
          python manage.py migrate

      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput

      - name: Run tests with coverage
        run: |
          coverage run --source='.' manage.py test
          coverage report --show-missing
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Run Django security check
        run: |
          python manage.py check --deploy

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff .

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run security checks with bandit
        run: |
          bandit -r . -x ./venv/,./test_*.py --severity-level medium

      - name: Run Safety CLI to check for vulnerabilities
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}


================================================================================
FILE: ./.safety-project.ini
================================================================================

[project]
id = hogtown
url = /codebases/hogtown/findings
name = hogtown



================================================================================
FILE: ./CLAUDE.md
================================================================================

# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

This is a Django web application project called "hogtown_project" with a core app.

## Development Commands

### Environment Setup
- Activate virtual environment: `source venv/bin/activate`
- Install dependencies: `pip install -r requirements.txt`

### Django Commands
- Run development server: `python manage.py runserver`
- Create migrations: `python manage.py makemigrations`
- Apply migrations: `python manage.py migrate`
- Create superuser: `python manage.py createsuperuser`
- Run tests: `python manage.py test`
- Collect static files: `python manage.py collectstatic`

### Project Structure
- `hogtown_project/`: Main Django project directory containing settings and configuration
- `core/`: Primary Django app for core functionality
- `venv/`: Python virtual environment (excluded from git)
- `requirements.txt`: Python package dependencies

## Development Notes

- Always activate the virtual environment before running Django commands
- The project uses Django 5.2.2
- Main app is called "core" - add new features here or create additional apps as needed

================================================================================
FILE: ./README.md
================================================================================

# Hogtown Catholic

A Django web application for managing Catholic parishes, ministries, and events in Gainesville, Florida.

## Features

- **Public Directory**: Browse parishes, ministries, and events
- **Ministry Leader Registration**: Apply to become a ministry leader with admin approval
- **Ministry Portal**: Manage ministry profiles and events (ad-hoc and recurring)
- **Event Calendar**: Interactive calendar with filtering capabilities
- **Admin Dashboard**: Approve/reject registrations and manage core data

## Technology Stack

- **Backend**: Django 5.2.2
- **Database**: SQLite (development), configurable for production
- **Email**: Brevo (Sendinblue) integration via django-anymail
- **CAPTCHA**: Prosopo Procaptcha for bot protection
- **Authentication**: Custom approval-based authentication system

## Development Setup

### Prerequisites

- Python 3.11 or 3.12
- Git

### Installation

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd hogtown
   ```

2. **Set up virtual environment**
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   pip install -r requirements-dev.txt  # For development
   ```

4. **Configure environment variables**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

5. **Run migrations**
   ```bash
   python manage.py migrate
   ```

6. **Create superuser**
   ```bash
   python manage.py createsuperuser
   ```

7. **Run development server**
   ```bash
   python manage.py runserver
   ```

## Testing

### Running Tests

```bash
# Run all tests
python manage.py test

# Run with coverage
coverage run --source='.' manage.py test
coverage report --show-missing

# Run specific test modules
python manage.py test core.test_models
python manage.py test core.test_views
python manage.py test core.test_authentication
```

### Test Structure

- `test_models.py` - Unit tests for Django models
- `test_forms.py` - Form validation and field tests
- `test_views.py` - Integration tests for views and workflows
- `test_authentication.py` - Authentication backend and login tests
- `test_admin.py` - Admin interface and bulk action tests
- `test_email.py` - Email template and notification tests

### Continuous Integration

The project uses GitHub Actions for CI/CD with the following jobs:

- **test**: Runs test suite with coverage on Python 3.11 and 3.12
- **lint**: Code quality checks with flake8, black, and isort
- **security**: Security scanning with bandit and safety

## Configuration

### Environment Variables

Create a `.env` file based on `.env.example`:

```env
SECRET_KEY=your-secret-key-here
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# Database
DATABASE_URL=sqlite:///db.sqlite3

# Prosopo Procaptcha
PROSOPO_SITE_KEY=your-prosopo-site-key
PROSOPO_SECRET_KEY=your-prosopo-secret-key

# Email
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
SENDINBLUE_API_KEY=your-brevo-api-key  # For production
```

### Production Deployment

For production deployment:

1. Set `DEBUG=False`
2. Configure a production database
3. Set up Brevo email service
4. Configure real Prosopo CAPTCHA keys
5. Set up proper static file serving
6. Use environment variables for sensitive settings

## Project Structure

```
hogtown/
├── core/                   # Main Django app
│   ├── models.py          # Data models
│   ├── views.py           # Views and business logic
│   ├── forms.py           # Form definitions
│   ├── admin.py           # Admin interface customization
│   ├── backends.py        # Custom authentication backend
│   ├── fields.py          # Custom form fields
│   ├── templates/         # HTML templates
│   └── test_*.py          # Test modules
├── hogtown_project/       # Django project settings
├── .github/workflows/     # CI/CD workflows
├── requirements.txt       # Production dependencies
├── requirements-dev.txt   # Development dependencies
├── .env.example          # Environment template
└── manage.py             # Django management script
```

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Run tests (`python manage.py test`)
5. Run linting (`flake8 .`, `black .`, `isort .`)
6. Commit your changes (`git commit -m 'Add amazing feature'`)
7. Push to the branch (`git push origin feature/amazing-feature`)
8. Open a Pull Request

## Terraform Infrastructure

The project includes production-ready Terraform configurations for deploying to AWS App Runner with multi-environment support. See `TERRAFORM_DEPLOYMENT.md` for detailed deployment instructions.

### Architecture Overview

- **Multi-Environment**: Separate staging and production environments with isolated state
- **Shared Database**: Single RDS PostgreSQL 17.2 instance with environment-specific databases
- **Security**: VPC connectors, restricted security groups, AWS Secrets Manager integration
- **Monitoring**: CloudWatch logs, Performance Insights, optional X-Ray tracing

### Directory Structure

```
terraform/
├── config/                    # Backend configurations
│   ├── backend.yaml          # Backend config template
│   ├── prod.tfbackend        # Production S3 backend
│   ├── staging.tfbackend     # Staging S3 backend
│   └── shared.tfbackend      # Shared infrastructure backend
├── environments/
│   ├── prod/                 # Production App Runner service
│   │   ├── backend.tf        # Environment-specific state
│   │   ├── main.tf           # Production configuration
│   │   ├── variables.tf      # Production variables
│   │   └── outputs.tf        # Production outputs
│   └── staging/              # Staging App Runner service
│       ├── backend.tf        # Environment-specific state
│       ├── main.tf           # Staging configuration
│       ├── variables.tf      # Staging variables
│       └── outputs.tf        # Staging outputs
├── modules/                  # Reusable Terraform modules
│   ├── apprunner/           # App Runner with VPC connector
│   ├── database/            # RDS instance with security
│   └── database-setup/      # Environment database creation
└── shared/                  # Shared infrastructure
    ├── backend.tf           # Remote state configuration
    ├── main.tf              # Shared RDS and GitHub connection
    ├── variables.tf         # Shared variables
    └── outputs.tf           # Shared outputs
```

### Prerequisites

- AWS CLI configured with appropriate permissions
- **Configure backend settings**: Edit the configuration files in `terraform/config/` to set your S3 bucket names, regions, and DynamoDB table names
- S3 buckets and DynamoDB table for remote state (required)
- GitHub repository URL for App Runner source connection

### Quick Deployment

1. **Configure backend settings**:
   ```bash
   # Edit backend configuration files with your AWS resources
   vim terraform/config/backend.yaml      # Set region and bucket names
   vim terraform/config/shared.tfbackend
   vim terraform/config/staging.tfbackend
   vim terraform/config/prod.tfbackend
   ```

2. **Deploy shared infrastructure** (RDS, GitHub connection):
   ```bash
   cd terraform/shared
   terraform init -backend-config=../config/shared.tfbackend
   terraform apply
   ```

3. **Deploy staging environment**:
   ```bash
   cd terraform/environments/staging
   terraform init -backend-config=../../config/staging.tfbackend
   terraform apply -var="github_repository_url=https://github.com/username/repo"
   ```

4. **Deploy production environment**:
   ```bash
   cd terraform/environments/prod
   terraform init -backend-config=../../config/prod.tfbackend
   terraform apply -var="github_repository_url=https://github.com/username/repo"
   ```

### Key Features

- **Security**: Private database access via VPC connectors, Secrets Manager for credentials
- **Isolation**: Separate Terraform state files per environment for safety
- **Monitoring**: CloudWatch logs with configurable retention, Performance Insights
- **Scalability**: Environment-specific resource allocation and health check configuration
- **Cost Optimization**: Configurable instance classes and monitoring levels per environment

**Note**: See `TERRAFORM_DEPLOYMENT.md` for comprehensive deployment instructions, security considerations, troubleshooting guides, and cost optimization strategies.

## License

This project is licensed under the MIT License - see the LICENSE file for details.

================================================================================
FILE: ./TERRAFORM_DEPLOYMENT.md
================================================================================

# Production-Ready Multi-Environment Terraform Deployment

This setup deploys the Django application to AWS App Runner with separate staging and production environments using a robust, secure architecture.

## Architecture Overview

- **Shared Infrastructure**: Single RDS PostgreSQL 17.2 instance with separate databases per environment
- **Security**: VPC connectors, restricted security groups, AWS Secrets Manager for credentials
- **Monitoring**: CloudWatch logs, optional X-Ray tracing, Performance Insights support
- **Isolation**: Separate Terraform state per environment for safety and team collaboration

## Directory Structure

```
terraform/
├── shared/                    # Shared RDS instance and GitHub connection
│   ├── backend.tf            # Remote state configuration
│   ├── main.tf
│   ├── variables.tf
│   └── outputs.tf
├── environments/
│   ├── staging/              # Staging App Runner service
│   │   ├── backend.tf        # Environment-specific state
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   └── prod/                 # Production App Runner service
│       ├── backend.tf
│       ├── main.tf
│       ├── variables.tf
│       └── outputs.tf
└── modules/
    ├── database/             # RDS instance with security
    ├── database-setup/       # Environment database creation
    └── apprunner/           # App Runner with VPC connector
```

## Key Improvements

### Security Enhancements
- **Restricted RDS Access**: Security groups allow only App Runner services to access database
- **VPC Connector**: App Runner connects to RDS via private networking
- **Secrets Manager**: Database credentials stored securely, rotatable
- **Least Privilege IAM**: App Runner roles have minimal required permissions

### Production Features
- **Multi-AZ Support**: Optional for RDS high availability
- **Enhanced Monitoring**: CloudWatch logs, Performance Insights, X-Ray tracing
- **Backup & Recovery**: Configurable backup retention and maintenance windows
- **Encryption**: RDS encryption at rest with optional KMS keys

### Operational Benefits
- **Separate State Files**: Each environment isolated for safety
- **Remote State Support**: S3 backend with DynamoDB locking
- **Health Check Tuning**: Environment-specific health check parameters
- **Resource Tagging**: Comprehensive tagging for cost allocation and management

## Deployment Steps

### Prerequisites

1. **Configure Backend Settings**:
   Edit the configuration files in `terraform/config/` to match your AWS resources:
   ```bash
   # Edit the main backend configuration
   vim terraform/config/backend.yaml
   ```
   Update the following values in `backend.yaml`:
   - `region`: Your preferred AWS region
   - `buckets.shared`: S3 bucket name for shared infrastructure state
   - `buckets.staging`: S3 bucket name for staging environment state
   - `buckets.prod`: S3 bucket name for production environment state

   ```bash
   # Edit each backend configuration file
   vim terraform/config/shared.tfbackend
   vim terraform/config/staging.tfbackend
   vim terraform/config/prod.tfbackend
   ```
   
   Update the following values in each `.tfbackend` file:
   - `bucket`: Your S3 bucket name for Terraform state
   - `region`: Your preferred AWS region
   - `dynamodb_table`: DynamoDB table name for state locking

2. **Create Required S3 Buckets and DynamoDB Table**:
```bash
# Create S3 buckets (use names from your backend.yaml)
aws s3 mb s3://your-shared-terraform-state-bucket
aws s3 mb s3://your-staging-terraform-state-bucket
aws s3 mb s3://your-prod-terraform-state-bucket

# Create DynamoDB table for state locking
aws dynamodb create-table \
  --table-name terraform-state-locks \
  --attribute-definitions AttributeName=LockID,AttributeType=S \
  --key-schema AttributeName=LockID,KeyType=HASH \
  --billing-mode PAY_PER_REQUEST
```

### 1. Deploy Shared Infrastructure

```bash
cd terraform/shared
terraform init
terraform plan
terraform apply
```

**Creates:**
- RDS PostgreSQL instance with security groups
- GitHub connection (requires manual authorization)
- Master database credentials in Secrets Manager

### 2. Deploy Database Setup

```bash
# Create environment-specific databases
cd ../environments/staging
terraform init
terraform plan -var="github_repository_url=https://github.com/username/repo"
terraform apply -var="github_repository_url=https://github.com/username/repo"

cd ../prod  
terraform init
terraform plan -var="github_repository_url=https://github.com/username/repo"
terraform apply -var="github_repository_url=https://github.com/username/repo"
```

## Configuration Variables

### Production Settings (Recommended)
```hcl
# terraform/shared/terraform.tfvars
multi_az = true
monitoring_interval = 60
performance_insights_enabled = true
deletion_protection = true
skip_final_snapshot = false
db_instance_class = "db.t4g.small"
```

### Environment Differences

| Setting | Staging | Production |
|---------|---------|------------|
| Branch | `develop` | `main` |
| Auto-deploy | `true` | `false` |
| Resources | 0.25 vCPU, 0.5 GB | 0.5 vCPU, 1 GB |
| Log Retention | 7 days | 30 days |
| Observability | Disabled | Enabled |
| Health Checks | Relaxed | Strict |

## Security Model

### Network Security
- RDS in private subnets (default VPC or custom VPC)
- App Runner VPC connector for database access
- Security groups restrict traffic to necessary ports only

### Access Control
- App Runner service roles with minimal permissions
- Secrets Manager access limited to specific secrets
- No public access to RDS instance

### Credential Management
- Master RDS credentials in Secrets Manager
- Environment-specific database users with separate passwords
- Automatic credential rotation supported

## Monitoring & Observability

### CloudWatch Integration
- Application logs with configurable retention
- RDS Enhanced Monitoring (optional)
- Performance Insights for query analysis

### Health Checks
- Configurable endpoints and thresholds
- Environment-specific tuning
- Automatic service recovery

## Cleanup

**Important:** Destroy in reverse order to avoid dependency issues.

```bash
# Destroy production environment
cd terraform/environments/prod
terraform destroy

# Destroy staging environment  
cd ../staging
terraform destroy

# Destroy shared infrastructure
cd ../../shared
terraform destroy
```

## Troubleshooting

### GitHub Connection Issues
- Manual authorization required in AWS console after first deployment
- Connection status available in Terraform outputs

### Database Connection Issues
- Verify VPC connector is enabled and properly configured
- Check security group rules allow App Runner to RDS access
- Validate Secrets Manager permissions

### App Runner Deployment Failures
- Check CloudWatch logs for application errors
- Verify `apprunner.yaml` configuration
- Ensure database migrations complete successfully

## Cost Optimization

### Development/Testing
- Use `db.t4g.micro` for RDS
- Disable Multi-AZ and monitoring
- Shorter log retention periods

### Production
- Enable Multi-AZ for high availability
- Use Performance Insights for optimization
- Consider Reserved Instances for predictable workloads

This architecture provides a production-ready foundation that can scale from development through enterprise deployments while maintaining security and operational best practices.

================================================================================
FILE: ./apprunner.yaml
================================================================================

version: 1.0
runtime: python3
build:
  commands:
    build:
      - echo "Installing dependencies..."
      - pip install -r requirements.txt
      - echo "Collecting static files..."
      - python manage.py collectstatic --noinput
run:
  runtime-version: 3.12
  command: |
    echo "Running database migrations at runtime..."
    python manage.py migrate --noinput
    echo "Starting Gunicorn server with ${GUNICORN_WORKERS:-1} workers..."
    gunicorn --bind 0.0.0.0:8000 \
             --workers ${GUNICORN_WORKERS:-1} \
             --timeout 60 \
             --keep-alive 2 \
             --max-requests 1000 \
             --max-requests-jitter 100 \
             hogtown_project.wsgi:application
  network:
    port: 8000
    env:
      PORT: 8000

================================================================================
FILE: ./core/__init__.py
================================================================================



================================================================================
FILE: ./core/admin.py
================================================================================

from django.conf import settings
from django.contrib import admin, messages
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.html import format_html

from .models import Category, Event, EventException, Ministry, Parish, User


@admin.register(Parish)
class ParishAdmin(admin.ModelAdmin):
    list_display = ("name", "phone_number", "website_url")
    search_fields = ("name", "address")


@admin.register(User)
class UserAdmin(BaseUserAdmin):
    list_display = (
        "username",
        "full_name",
        "email",
        "role",
        "colored_status",
        "associated_parish",
        "date_joined",
    )
    list_filter = ("role", "status", "associated_parish", "date_joined")
    search_fields = ("username", "full_name", "email")
    actions = ["approve_users", "reject_users"]

    def get_queryset(self, request):
        qs = super().get_queryset(request)
        # Show pending users first
        return qs.order_by("status", "-date_joined")

    def colored_status(self, obj):
        colors = {"pending": "orange", "approved": "green", "rejected": "red"}
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            colors.get(obj.status, "black"),
            obj.get_status_display(),
        )

    colored_status.short_description = "Status"

    def approve_users(self, request, queryset):
        pending_users = queryset.filter(status="pending")
        if not pending_users.exists():
            self.message_user(request, "No pending users selected.", messages.WARNING)
            return

        approved_count = 0
        for user in pending_users:
            user.status = "approved"
            user.save()

            # Send approval email
            try:
                context = {
                    "user": user,
                    "login_url": request.build_absolute_uri("/login/"),
                }
                subject = render_to_string(
                    "core/emails/approval_subject.txt", context
                ).strip()
                message = render_to_string("core/emails/approval_body.txt", context)

                send_mail(
                    subject=subject,
                    message=message,
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[user.email],
                    fail_silently=False,
                )
                approved_count += 1
            except Exception as e:
                self.message_user(
                    request, f"Error sending email to {user.email}: {e}", messages.ERROR
                )

        self.message_user(
            request,
            f"Successfully approved {approved_count} users and sent notification emails.",
            messages.SUCCESS,
        )

    approve_users.short_description = "Approve selected users"

    def reject_users(self, request, queryset):
        pending_users = queryset.filter(status="pending")
        if not pending_users.exists():
            self.message_user(request, "No pending users selected.", messages.WARNING)
            return

        rejected_count = 0
        for user in pending_users:
            user.status = "rejected"
            user.save()

            # Send rejection email
            try:
                context = {"user": user}
                subject = render_to_string(
                    "core/emails/rejection_subject.txt", context
                ).strip()
                message = render_to_string("core/emails/rejection_body.txt", context)

                send_mail(
                    subject=subject,
                    message=message,
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[user.email],
                    fail_silently=False,
                )
                rejected_count += 1
            except Exception as e:
                self.message_user(
                    request, f"Error sending email to {user.email}: {e}", messages.ERROR
                )

        self.message_user(
            request,
            f"Successfully rejected {rejected_count} users and sent notification emails.",
            messages.SUCCESS,
        )

    reject_users.short_description = "Reject selected users"

    fieldsets = BaseUserAdmin.fieldsets + (
        (
            "Hogtown Catholic Info",
            {
                "fields": (
                    "full_name",
                    "associated_parish",
                    "requested_ministry_details",
                    "role",
                    "status",
                )
            },
        ),
    )

    add_fieldsets = BaseUserAdmin.add_fieldsets + (
        (
            "Hogtown Catholic Info",
            {
                "fields": (
                    "full_name",
                    "associated_parish",
                    "requested_ministry_details",
                    "role",
                    "status",
                )
            },
        ),
    )


@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ("name",)
    search_fields = ("name",)


@admin.register(Ministry)
class MinistryAdmin(admin.ModelAdmin):
    list_display = ("name", "owner_user", "associated_parish")
    list_filter = ("associated_parish", "categories")
    search_fields = ("name", "description")
    filter_horizontal = ("categories",)


@admin.register(Event)
class EventAdmin(admin.ModelAdmin):
    list_display = ("title", "associated_ministry", "is_recurring", "get_event_time")
    list_filter = ("is_recurring", "associated_ministry__associated_parish")
    search_fields = ("title", "description", "location")

    fieldsets = (
        (
            "Basic Information",
            {
                "fields": (
                    "associated_ministry",
                    "title",
                    "description",
                    "location",
                    "is_recurring",
                )
            },
        ),
        (
            "Ad-hoc Event Times",
            {
                "fields": ("start_datetime", "end_datetime"),
                "classes": ("collapse",),
            },
        ),
        (
            "Recurring Event Details",
            {
                "fields": (
                    "series_start_date",
                    "series_end_date",
                    "start_time_of_day",
                    "end_time_of_day",
                    "recurrence_rule",
                ),
                "classes": ("collapse",),
            },
        ),
    )

    def get_event_time(self, obj):
        if obj.is_recurring:
            return f"Recurring: {obj.start_time_of_day} - {obj.end_time_of_day}"
        else:
            return f"{obj.start_datetime} - {obj.end_datetime}"

    get_event_time.short_description = "Event Time"


@admin.register(EventException)
class EventExceptionAdmin(admin.ModelAdmin):
    list_display = ("event", "original_occurrence_date", "status", "new_start_datetime")
    list_filter = ("status", "event__associated_ministry__associated_parish")
    search_fields = ("event__title",)


================================================================================
FILE: ./core/apps.py
================================================================================

from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "core"


================================================================================
FILE: ./core/backends.py
================================================================================

from django.contrib.auth import get_user_model
from django.contrib.auth.backends import ModelBackend

User = get_user_model()


class ApprovedUserBackend(ModelBackend):
    """
    Custom authentication backend that only allows approved users to log in.
    """

    def authenticate(self, request, username=None, password=None, **kwargs):
        user = super().authenticate(request, username, password, **kwargs)

        if user and user.status != "approved":
            return None  # Don't allow login for non-approved users

        return user


================================================================================
FILE: ./core/fields.py
================================================================================

import requests

from django import forms
from django.conf import settings
from django.core.exceptions import ValidationError


class ProsopoWidget(forms.Widget):
    template_name = "core/widgets/prosopo.html"

    def __init__(self, attrs=None):
        default_attrs = {"class": "procaptcha"}
        if attrs:
            default_attrs.update(attrs)
        super().__init__(default_attrs)

    def render(self, name, value, attrs=None, renderer=None):
        if attrs is None:
            attrs = {}
        attrs["data-sitekey"] = getattr(settings, "PROSOPO_SITE_KEY", "")
        return super().render(name, value, attrs, renderer)


class ProsopoField(forms.CharField):
    widget = ProsopoWidget

    def __init__(self, *args, **kwargs):
        kwargs.setdefault("required", True)
        kwargs.setdefault("label", "")
        super().__init__(*args, **kwargs)

    def validate(self, value):
        super().validate(value)
        if value:
            self._verify_token(value)

    def _verify_token(self, token):
        """Verify the Prosopo token with the API"""
        secret_key = getattr(settings, "PROSOPO_SECRET_KEY", "")
        verify_url = getattr(
            settings, "PROSOPO_VERIFY_URL", "https://api.prosopo.io/siteverify"
        )

        if not secret_key:
            raise ValidationError("Prosopo secret key not configured")

        try:
            response = requests.post(
                verify_url, json={"secret": secret_key, "token": token}, timeout=10
            )

            if response.status_code != 200:
                raise ValidationError("Failed to verify captcha")

            result = response.json()
            if not result.get("success", False):
                raise ValidationError("Captcha verification failed")

        except requests.RequestException:
            raise ValidationError("Failed to verify captcha - network error")
        except (ValueError, KeyError):
            raise ValidationError("Invalid captcha response")


================================================================================
FILE: ./core/forms.py
================================================================================

from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.core.exceptions import ValidationError

from .fields import ProsopoField
from .models import Parish, User


class MinistryLeaderRegistrationForm(UserCreationForm):
    full_name = forms.CharField(
        max_length=200, widget=forms.TextInput(attrs={"class": "form-control"})
    )
    email = forms.EmailField(widget=forms.EmailInput(attrs={"class": "form-control"}))
    associated_parish = forms.ModelChoiceField(
        queryset=Parish.objects.all(),
        widget=forms.Select(attrs={"class": "form-control"}),
        empty_label="Select your parish...",
    )
    requested_ministry_details = forms.CharField(
        widget=forms.Textarea(
            attrs={
                "class": "form-control",
                "rows": 4,
                "placeholder": "Please describe the ministry you lead or wish to create, "
                "including its purpose and activities.",
            }
        ),
        help_text="Please describe the ministry you lead or wish to create, including its purpose and activities.",
    )
    captcha = ProsopoField()

    class Meta:
        model = User
        fields = (
            "username",
            "email",
            "full_name",
            "associated_parish",
            "requested_ministry_details",
            "password1",
            "password2",
        )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Add Bootstrap classes to password fields
        self.fields["username"].widget.attrs.update({"class": "form-control"})
        self.fields["password1"].widget.attrs.update({"class": "form-control"})
        self.fields["password2"].widget.attrs.update({"class": "form-control"})

        # Update field labels and help texts
        self.fields["username"].help_text = None
        self.fields["password1"].help_text = None
        self.fields[
            "password2"
        ].help_text = "Enter the same password as before, for verification."

    def clean_email(self):
        email = self.cleaned_data.get("email")
        if User.objects.filter(email=email).exists():
            raise ValidationError("A user with this email already exists.")
        return email

    def save(self, commit=True):
        user = super().save(commit=False)
        user.email = self.cleaned_data["email"]
        user.full_name = self.cleaned_data["full_name"]
        user.associated_parish = self.cleaned_data["associated_parish"]
        user.requested_ministry_details = self.cleaned_data[
            "requested_ministry_details"
        ]
        user.role = "leader"
        user.status = "pending"
        if commit:
            user.save()
        return user


================================================================================
FILE: ./core/migrations/0001_initial.py
================================================================================

# Generated by Django 5.2.2 on 2025-06-06 01:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name_plural": "categories",
            },
        ),
        migrations.CreateModel(
            name="Parish",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("address", models.TextField()),
                ("website_url", models.URLField(blank=True, null=True)),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                ("mass_schedule", models.TextField(blank=True)),
            ],
            options={
                "verbose_name_plural": "parishes",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("full_name", models.CharField(max_length=200)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("leader", "Ministry Leader"),
                            ("admin", "Administrator"),
                        ],
                        default="leader",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("pending", "Pending"), ("approved", "Approved")],
                        default="pending",
                        max_length=10,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "associated_parish",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.parish",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Ministry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("contact_info", models.TextField()),
                ("categories", models.ManyToManyField(blank=True, to="core.category")),
                (
                    "owner_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "associated_parish",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.parish"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "ministries",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("location", models.CharField(max_length=300)),
                ("is_recurring", models.BooleanField(default=False)),
                ("start_datetime", models.DateTimeField(blank=True, null=True)),
                ("end_datetime", models.DateTimeField(blank=True, null=True)),
                ("series_start_date", models.DateField(blank=True, null=True)),
                ("series_end_date", models.DateField(blank=True, null=True)),
                ("start_time_of_day", models.TimeField(blank=True, null=True)),
                ("end_time_of_day", models.TimeField(blank=True, null=True)),
                ("recurrence_rule", models.TextField(blank=True)),
                (
                    "associated_ministry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.ministry"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventException",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("original_occurrence_date", models.DateField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("cancelled", "Cancelled"),
                            ("rescheduled", "Rescheduled"),
                        ],
                        max_length=12,
                    ),
                ),
                ("new_start_datetime", models.DateTimeField(blank=True, null=True)),
                ("new_end_datetime", models.DateTimeField(blank=True, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.event"
                    ),
                ),
            ],
            options={
                "unique_together": {("event", "original_occurrence_date")},
            },
        ),
    ]


================================================================================
FILE: ./core/migrations/0002_user_requested_ministry_details_alter_user_status.py
================================================================================

# Generated by Django 5.2.2 on 2025-06-06 16:00

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="user",
            name="requested_ministry_details",
            field=models.TextField(
                blank=True,
                help_text="Description of the ministry they own or wish to create",
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="status",
            field=models.CharField(
                choices=[
                    ("pending", "Pending"),
                    ("approved", "Approved"),
                    ("rejected", "Rejected"),
                ],
                default="pending",
                max_length=10,
            ),
        ),
    ]


================================================================================
FILE: ./core/migrations/__init__.py
================================================================================



================================================================================
FILE: ./core/models.py
================================================================================

from django.contrib.auth.models import AbstractUser
from django.core.exceptions import ValidationError
from django.db import models


class Parish(models.Model):
    name = models.CharField(max_length=200)
    address = models.TextField()
    website_url = models.URLField(blank=True, null=True)
    phone_number = models.CharField(max_length=20, blank=True)
    mass_schedule = models.TextField(blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name_plural = "parishes"


class User(AbstractUser):
    ROLE_CHOICES = [
        ("leader", "Ministry Leader"),
        ("admin", "Administrator"),
    ]

    STATUS_CHOICES = [
        ("pending", "Pending"),
        ("approved", "Approved"),
        ("rejected", "Rejected"),
    ]

    full_name = models.CharField(max_length=200)
    associated_parish = models.ForeignKey(
        Parish, on_delete=models.CASCADE, null=True, blank=True
    )
    requested_ministry_details = models.TextField(
        blank=True, help_text="Description of the ministry they own or wish to create"
    )
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default="leader")
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default="pending")

    def __str__(self):
        return f"{self.full_name} ({self.email})"


class Category(models.Model):
    name = models.CharField(max_length=100, unique=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name_plural = "categories"


class Ministry(models.Model):
    owner_user = models.ForeignKey(User, on_delete=models.CASCADE)
    associated_parish = models.ForeignKey(Parish, on_delete=models.CASCADE)
    name = models.CharField(max_length=200)
    description = models.TextField()
    contact_info = models.TextField()
    categories = models.ManyToManyField(Category, blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name_plural = "ministries"


class Event(models.Model):
    associated_ministry = models.ForeignKey(Ministry, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    description = models.TextField()
    location = models.CharField(max_length=300)
    is_recurring = models.BooleanField(default=False)

    # For ad-hoc events
    start_datetime = models.DateTimeField(null=True, blank=True)
    end_datetime = models.DateTimeField(null=True, blank=True)

    # For recurring events
    series_start_date = models.DateField(null=True, blank=True)
    series_end_date = models.DateField(null=True, blank=True)
    start_time_of_day = models.TimeField(null=True, blank=True)
    end_time_of_day = models.TimeField(null=True, blank=True)
    recurrence_rule = models.TextField(blank=True)

    def __str__(self):
        return self.title

    def clean(self):
        if self.is_recurring:
            if not all(
                [
                    self.series_start_date,
                    self.start_time_of_day,
                    self.end_time_of_day,
                    self.recurrence_rule,
                ]
            ):
                raise ValidationError(
                    "Recurring events must have series dates, times, and recurrence rule."
                )
        else:
            if not all([self.start_datetime, self.end_datetime]):
                raise ValidationError("Ad-hoc events must have start and end datetime.")


class EventException(models.Model):
    STATUS_CHOICES = [
        ("cancelled", "Cancelled"),
        ("rescheduled", "Rescheduled"),
    ]

    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    original_occurrence_date = models.DateField()
    status = models.CharField(max_length=12, choices=STATUS_CHOICES)
    new_start_datetime = models.DateTimeField(null=True, blank=True)
    new_end_datetime = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f"{self.event.title} - {self.original_occurrence_date} ({self.status})"

    def clean(self):
        if self.status == "rescheduled" and not all(
            [self.new_start_datetime, self.new_end_datetime]
        ):
            raise ValidationError(
                "Rescheduled events must have new start and end datetime."
            )

    class Meta:
        unique_together = ("event", "original_occurrence_date")


================================================================================
FILE: ./core/templates/core/base.html
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Hogtown Catholic{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet">
    {% block extra_css %}{% endblock %}
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="{% url 'parish_directory' %}">Hogtown Catholic</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'parish_directory' %}">Parishes</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'event_calendar' %}">Events</a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    {% if user.is_authenticated %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'ministry_portal' %}">Ministry Portal</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'logout' %}">Logout</a>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'register' %}">Register as Ministry Leader</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'login' %}">Login</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <main class="container mt-4">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            {% endfor %}
        {% endif %}

        {% block content %}{% endblock %}
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>

================================================================================
FILE: ./core/templates/core/emails/admin_notification_body.txt
================================================================================

A new ministry leader has registered and is pending approval.

Name: {{ user.full_name }}
Email: {{ user.email }}
Parish: {{ user.associated_parish.name|default:"Not specified" }}
Ministry Details: {{ user.requested_ministry_details }}

Please log in to the admin panel to approve or reject this request:
{{ admin_url }}

Best regards,
Hogtown Catholic System

================================================================================
FILE: ./core/templates/core/emails/admin_notification_subject.txt
================================================================================

New Ministry Leader Registration Request

================================================================================
FILE: ./core/templates/core/emails/approval_body.txt
================================================================================

Dear {{ user.full_name }},

Your account has been approved! You can now log in to manage your ministry and events.

Login at: {{ login_url }}

Best regards,
Hogtown Catholic Team

================================================================================
FILE: ./core/templates/core/emails/approval_subject.txt
================================================================================

Your Hogtown Catholic Account is Approved

================================================================================
FILE: ./core/templates/core/emails/rejection_body.txt
================================================================================

Dear {{ user.full_name }},

Thank you for your interest in joining Hogtown Catholic. After review, your application was not approved at this time.

If you have any questions, please feel free to contact us.

Best regards,
Hogtown Catholic Team

================================================================================
FILE: ./core/templates/core/emails/rejection_subject.txt
================================================================================

Hogtown Catholic Account Update

================================================================================
FILE: ./core/templates/core/event_calendar.html
================================================================================

{% extends 'core/base.html' %}

{% block title %}Event Calendar - Hogtown Catholic{% endblock %}

{% block extra_css %}
<style>
    .fc-event {
        cursor: pointer;
    }
    .filter-section {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.375rem;
        margin-bottom: 1rem;
    }
</style>
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1>Event Calendar</h1>
        <p class="lead">Find Catholic events and activities in the Gainesville area.</p>
    </div>
</div>

<div class="filter-section">
    <h5>Filter Events</h5>
    <div class="row">
        <div class="col-md-6">
            <label for="categoryFilter" class="form-label">Filter by Category:</label>
            <select id="categoryFilter" class="form-select">
                <option value="">All Categories</option>
                {% for category in categories %}
                    <option value="{{ category.id }}">{{ category.name }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="col-md-6">
            <label for="parishFilter" class="form-label">Filter by Parish:</label>
            <select id="parishFilter" class="form-select">
                <option value="">All Parishes</option>
                {% for parish in parishes %}
                    <option value="{{ parish.id }}">{{ parish.name }}</option>
                {% endfor %}
            </select>
        </div>
    </div>
</div>

<div id="calendar"></div>

<!-- Event Detail Modal -->
<div class="modal fade" id="eventModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventModalTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="eventModalBody">
                <!-- Event details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    var calendarEl = document.getElementById('calendar');
    var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,listWeek'
        },
        events: function(info, successCallback, failureCallback) {
            fetch(`{% url 'calendar_events_api' %}?start=${info.startStr}&end=${info.endStr}`)
                .then(response => response.json())
                .then(data => {
                    successCallback(data.events);
                })
                .catch(error => {
                    console.error('Error loading events:', error);
                    failureCallback(error);
                });
        },
        eventClick: function(info) {
            // Show event details in modal
            document.getElementById('eventModalTitle').textContent = info.event.title;
            document.getElementById('eventModalBody').innerHTML = `
                <p><strong>Time:</strong> ${info.event.start.toLocaleString()}</p>
                ${info.event.end ? `<p><strong>End:</strong> ${info.event.end.toLocaleString()}</p>` : ''}
                <p><strong>Location:</strong> ${info.event.extendedProps.location || 'Not specified'}</p>
                <p><strong>Ministry:</strong> ${info.event.extendedProps.ministry}</p>
                <p><strong>Parish:</strong> ${info.event.extendedProps.parish}</p>
                <p><strong>Description:</strong></p>
                <p>${info.event.extendedProps.description || 'No description available'}</p>
            `;
            var modal = new bootstrap.Modal(document.getElementById('eventModal'));
            modal.show();
        },
        height: 'auto',
        eventDisplay: 'block'
    });

    calendar.render();

    // Filter functionality
    document.getElementById('categoryFilter').addEventListener('change', function() {
        calendar.refetchEvents();
    });

    document.getElementById('parishFilter').addEventListener('change', function() {
        calendar.refetchEvents();
    });
});
</script>
{% endblock %}

================================================================================
FILE: ./core/templates/core/event_form.html
================================================================================

{% extends 'core/base.html' %}

{% block title %}
{% if object %}Edit Event{% else %}Create Event{% endif %} - Hogtown Catholic
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-md-10">
        <h1>{% if object %}Edit Event{% else %}Create New Event{% endif %}</h1>
        
        <form method="post" id="eventForm">
            {% csrf_token %}
            
            {% if form.errors %}
                <div class="alert alert-danger">
                    <h6>Please correct the following errors:</h6>
                    {% for field, errors in form.errors.items %}
                        {% for error in errors %}
                            <p>{{ field }}: {{ error }}</p>
                        {% endfor %}
                    {% endfor %}
                </div>
            {% endif %}
            
            <div class="mb-3">
                <label for="{{ form.associated_ministry.id_for_label }}" class="form-label">Ministry</label>
                {{ form.associated_ministry }}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.title.id_for_label }}" class="form-label">Event Title</label>
                {{ form.title }}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.description.id_for_label }}" class="form-label">Description</label>
                {{ form.description }}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.location.id_for_label }}" class="form-label">Location</label>
                {{ form.location }}
            </div>
            
            <div class="mb-3">
                <div class="form-check">
                    {{ form.is_recurring }}
                    <label class="form-check-label" for="{{ form.is_recurring.id_for_label }}">
                        This is a recurring event
                    </label>
                </div>
            </div>
            
            <!-- Ad-hoc Event Fields -->
            <div id="adhocFields" class="border p-3 mb-3" style="display: none;">
                <h5>One-time Event Details</h5>
                <div class="row">
                    <div class="col-md-6">
                        <label for="{{ form.start_datetime.id_for_label }}" class="form-label">Start Date & Time</label>
                        <input type="datetime-local" 
                               id="{{ form.start_datetime.id_for_label }}" 
                               name="{{ form.start_datetime.name }}"
                               class="form-control"
                               value="{{ form.start_datetime.value|default:'' }}"
                               step="60">
                    </div>
                    <div class="col-md-6">
                        <label for="{{ form.end_datetime.id_for_label }}" class="form-label">End Date & Time</label>
                        <input type="datetime-local" 
                               id="{{ form.end_datetime.id_for_label }}" 
                               name="{{ form.end_datetime.name }}"
                               class="form-control"
                               value="{{ form.end_datetime.value|default:'' }}"
                               step="60">
                    </div>
                </div>
            </div>
            
            <!-- Recurring Event Fields -->
            <div id="recurringFields" class="border p-3 mb-3" style="display: none;">
                <h5>Recurring Event Details</h5>
                <div class="row">
                    <div class="col-md-6">
                        <label for="{{ form.series_start_date.id_for_label }}" class="form-label">Series Start Date</label>
                        <input type="date" 
                               id="{{ form.series_start_date.id_for_label }}" 
                               name="{{ form.series_start_date.name }}"
                               class="form-control"
                               value="{{ form.series_start_date.value|default:'' }}">
                    </div>
                    <div class="col-md-6">
                        <label for="{{ form.series_end_date.id_for_label }}" class="form-label">Series End Date (optional)</label>
                        <input type="date" 
                               id="{{ form.series_end_date.id_for_label }}" 
                               name="{{ form.series_end_date.name }}"
                               class="form-control"
                               value="{{ form.series_end_date.value|default:'' }}">
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-6">
                        <label for="{{ form.start_time_of_day.id_for_label }}" class="form-label">Start Time</label>
                        <input type="time" 
                               id="{{ form.start_time_of_day.id_for_label }}" 
                               name="{{ form.start_time_of_day.name }}"
                               class="form-control"
                               value="{{ form.start_time_of_day.value|default:'' }}"
                               step="60">
                    </div>
                    <div class="col-md-6">
                        <label for="{{ form.end_time_of_day.id_for_label }}" class="form-label">End Time</label>
                        <input type="time" 
                               id="{{ form.end_time_of_day.id_for_label }}" 
                               name="{{ form.end_time_of_day.name }}"
                               class="form-control"
                               value="{{ form.end_time_of_day.value|default:'' }}"
                               step="60">
                    </div>
                </div>
                
                <div class="mt-3">
                    <h6>Recurrence Pattern</h6>
                    <div class="row">
                        <div class="col-md-4">
                            <label for="frequency" class="form-label">Frequency</label>
                            <select id="frequency" class="form-select">
                                <option value="WEEKLY">Weekly</option>
                                <option value="MONTHLY">Monthly</option>
                                <option value="DAILY">Daily</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="interval" class="form-label">Every</label>
                            <select id="interval" class="form-select">
                                <option value="1">1</option>
                                <option value="2">2</option>
                                <option value="3">3</option>
                                <option value="4">4</option>
                            </select>
                            <div class="form-text">weeks/months/days</div>
                        </div>
                    </div>
                    
                    <div id="weeklyOptions" class="mt-3">
                        <label class="form-label">Days of the Week</label>
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" id="sunday" value="SU">
                                    <label class="form-check-label" for="sunday">Sunday</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" id="monday" value="MO">
                                    <label class="form-check-label" for="monday">Monday</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" id="tuesday" value="TU">
                                    <label class="form-check-label" for="tuesday">Tuesday</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" id="wednesday" value="WE">
                                    <label class="form-check-label" for="wednesday">Wednesday</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" id="thursday" value="TH">
                                    <label class="form-check-label" for="thursday">Thursday</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" id="friday" value="FR">
                                    <label class="form-check-label" for="friday">Friday</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="checkbox" id="saturday" value="SA">
                                    <label class="form-check-label" for="saturday">Saturday</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mb-3" style="display: none;">
                    <label for="{{ form.recurrence_rule.id_for_label }}" class="form-label">Generated Recurrence Rule</label>
                    {{ form.recurrence_rule }}
                    <div class="form-text">This will be automatically generated based on your selections above.</div>
                </div>
            </div>
            
            <div class="btn-group" role="group">
                <button type="submit" class="btn btn-primary">
                    {% if object %}Update Event{% else %}Create Event{% endif %}
                </button>
                <a href="{% url 'ministry_portal' %}" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Add Bootstrap classes to remaining form fields (datetime/date/time inputs already have classes)
    const textInputs = document.querySelectorAll('input[type="text"], textarea, select');
    textInputs.forEach(input => {
        if (!input.classList.contains('form-control')) {
            input.classList.add('form-control');
        }
    });
    
    const recurringCheckbox = document.getElementById('{{ form.is_recurring.id_for_label }}');
    const adhocFields = document.getElementById('adhocFields');
    const recurringFields = document.getElementById('recurringFields');
    const recurrenceRuleField = document.getElementById('{{ form.recurrence_rule.id_for_label }}');
    
    function toggleEventType() {
        if (recurringCheckbox.checked) {
            adhocFields.style.display = 'none';
            recurringFields.style.display = 'block';
        } else {
            adhocFields.style.display = 'block';
            recurringFields.style.display = 'none';
        }
    }
    
    // Initialize form state
    toggleEventType();
    
    recurringCheckbox.addEventListener('change', toggleEventType);
    
    // Recurrence rule builder
    function updateRecurrenceRule() {
        if (!recurringCheckbox.checked) return;
        
        const frequency = document.getElementById('frequency').value;
        const interval = document.getElementById('interval').value;
        
        let rule = `FREQ=${frequency}`;
        
        if (interval > 1) {
            rule += `;INTERVAL=${interval}`;
        }
        
        if (frequency === 'WEEKLY') {
            const selectedDays = [];
            document.querySelectorAll('#weeklyOptions input[type="checkbox"]:checked').forEach(cb => {
                selectedDays.push(cb.value);
            });
            if (selectedDays.length > 0) {
                rule += `;BYDAY=${selectedDays.join(',')}`;
            }
        }
        
        recurrenceRuleField.value = rule;
    }
    
    // Event listeners for recurrence rule updates
    document.getElementById('frequency').addEventListener('change', function() {
        document.getElementById('weeklyOptions').style.display = this.value === 'WEEKLY' ? 'block' : 'none';
        updateRecurrenceRule();
    });
    
    document.getElementById('interval').addEventListener('change', updateRecurrenceRule);
    
    document.querySelectorAll('#weeklyOptions input[type="checkbox"]').forEach(cb => {
        cb.addEventListener('change', updateRecurrenceRule);
    });
    
    // Initialize frequency display
    document.getElementById('frequency').dispatchEvent(new Event('change'));
    updateRecurrenceRule();
});
</script>
{% endblock %}

================================================================================
FILE: ./core/templates/core/login.html
================================================================================

{% extends 'core/base.html' %}

{% block title %}Login - Hogtown Catholic{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h4>Ministry Leader Login</h4>
            </div>
            <div class="card-body">
                <form method="post">
                    {% csrf_token %}
                    
                    {% if form.errors %}
                        <div class="alert alert-danger">
                            {% for field, errors in form.errors.items %}
                                {% for error in errors %}
                                    <p>{{ error }}</p>
                                {% endfor %}
                            {% endfor %}
                        </div>
                    {% endif %}
                    
                    <div class="mb-3">
                        <label for="id_username" class="form-label">Username:</label>
                        <input type="text" name="username" class="form-control" id="id_username" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="id_password" class="form-label">Password:</label>
                        <input type="password" name="password" class="form-control" id="id_password" required>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">Login</button>
                </form>
                
                <hr>
                <div class="text-muted">
                    <small>
                        <strong>Ministry Leaders:</strong> Your account must be approved by an administrator before you can log in.
                        If you're having trouble logging in, your account may be pending approval.
                    </small>
                </div>
                <div class="mt-2">
                    <small>
                        <a href="{% url 'register' %}" class="text-decoration-none">Need an account? Register here</a>
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

================================================================================
FILE: ./core/templates/core/ministry_detail.html
================================================================================

{% extends 'core/base.html' %}

{% block title %}{{ ministry.name }} - Hogtown Catholic{% endblock %}

{% block content %}
<div class="row">
    <div class="col-md-8">
        <h1>{{ ministry.name }}</h1>
        <p class="lead">{{ ministry.associated_parish.name }}</p>
        
        <div class="card mb-4">
            <div class="card-header">
                <h5>About This Ministry</h5>
            </div>
            <div class="card-body">
                <div style="white-space: pre-line;">{{ ministry.description }}</div>
                
                <div class="mt-3">
                    <h6>Categories</h6>
                    {% for category in ministry.categories.all %}
                        <span class="badge bg-secondary me-1">{{ category.name }}</span>
                    {% empty %}
                        <span class="text-muted">No categories assigned</span>
                    {% endfor %}
                </div>
            </div>
        </div>
        
        <div class="card mb-4">
            <div class="card-header">
                <h5>Contact Information</h5>
            </div>
            <div class="card-body">
                <div style="white-space: pre-line;">{{ ministry.contact_info }}</div>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Upcoming Events</h5>
            </div>
            <div class="card-body">
                {% for event in events %}
                    <div class="mb-3 border-bottom pb-2">
                        <h6>{{ event.title }}</h6>
                        <p class="text-muted small">
                            {% if event.is_recurring %}
                                Recurring: {{ event.start_time_of_day }} - {{ event.end_time_of_day }}
                            {% else %}
                                {{ event.start_datetime|date:"M j, Y g:i A" }}
                            {% endif %}
                        </p>
                        <p class="small">{{ event.location }}</p>
                        <p class="small">{{ event.description|truncatewords:15 }}</p>
                    </div>
                {% empty %}
                    <p class="text-muted">No events scheduled.</p>
                {% endfor %}
            </div>
        </div>
    </div>
</div>

<div class="mt-3">
    <a href="{% url 'parish_detail' ministry.associated_parish.id %}" class="btn btn-secondary">← Back to {{ ministry.associated_parish.name }}</a>
    <a href="{% url 'event_calendar' %}" class="btn btn-info">View Calendar</a>
</div>
{% endblock %}

================================================================================
FILE: ./core/templates/core/ministry_form.html
================================================================================

{% extends 'core/base.html' %}

{% block title %}
{% if object %}Edit Ministry{% else %}Create Ministry{% endif %} - Hogtown Catholic
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-md-8">
        <h1>{% if object %}Edit Ministry{% else %}Create New Ministry{% endif %}</h1>
        
        <form method="post">
            {% csrf_token %}
            
            {% if form.errors %}
                <div class="alert alert-danger">
                    <h6>Please correct the following errors:</h6>
                    {% for field, errors in form.errors.items %}
                        {% for error in errors %}
                            <p>{{ field }}: {{ error }}</p>
                        {% endfor %}
                    {% endfor %}
                </div>
            {% endif %}
            
            <div class="mb-3">
                <label for="{{ form.associated_parish.id_for_label }}" class="form-label">Associated Parish</label>
                {{ form.associated_parish }}
                {% if form.associated_parish.help_text %}
                    <div class="form-text">{{ form.associated_parish.help_text }}</div>
                {% endif %}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.name.id_for_label }}" class="form-label">Ministry Name</label>
                {{ form.name }}
                {% if form.name.help_text %}
                    <div class="form-text">{{ form.name.help_text }}</div>
                {% endif %}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.description.id_for_label }}" class="form-label">Description</label>
                {{ form.description }}
                {% if form.description.help_text %}
                    <div class="form-text">{{ form.description.help_text }}</div>
                {% endif %}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.contact_info.id_for_label }}" class="form-label">Contact Information</label>
                {{ form.contact_info }}
                {% if form.contact_info.help_text %}
                    <div class="form-text">{{ form.contact_info.help_text }}</div>
                {% endif %}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.categories.id_for_label }}" class="form-label">Categories</label>
                {{ form.categories }}
                {% if form.categories.help_text %}
                    <div class="form-text">{{ form.categories.help_text }}</div>
                {% endif %}
            </div>
            
            <div class="btn-group" role="group">
                <button type="submit" class="btn btn-primary">
                    {% if object %}Update Ministry{% else %}Create Ministry{% endif %}
                </button>
                <a href="{% url 'ministry_portal' %}" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
</div>

<script>
// Add Bootstrap classes to form fields
document.addEventListener('DOMContentLoaded', function() {
    const textInputs = document.querySelectorAll('input[type="text"], textarea, select');
    textInputs.forEach(input => {
        input.classList.add('form-control');
    });
    
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        checkbox.classList.add('form-check-input');
        const label = document.querySelector(`label[for="${checkbox.id}"]`);
        if (label) {
            label.classList.add('form-check-label');
        }
    });
});
</script>
{% endblock %}

================================================================================
FILE: ./core/templates/core/ministry_portal.html
================================================================================

{% extends 'core/base.html' %}

{% block title %}Ministry Portal - Hogtown Catholic{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1>Ministry Leader Portal</h1>
        <p class="lead">Welcome, {{ user.full_name }}! Manage your ministries and events.</p>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Your Ministries</h5>
                <a href="{% url 'ministry_create' %}" class="btn btn-primary btn-sm">Add New Ministry</a>
            </div>
            <div class="card-body">
                {% for ministry in ministries %}
                    <div class="border-bottom pb-3 mb-3">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h6>{{ ministry.name }}</h6>
                                <p class="text-muted">{{ ministry.associated_parish.name }}</p>
                                <p>{{ ministry.description|truncatewords:30 }}</p>
                                <div class="mb-2">
                                    {% for category in ministry.categories.all %}
                                        <span class="badge bg-secondary me-1">{{ category.name }}</span>
                                    {% endfor %}
                                </div>
                            </div>
                            <div class="btn-group" role="group">
                                <a href="{% url 'ministry_edit' ministry.pk %}" class="btn btn-sm btn-outline-primary">Edit</a>
                                <a href="{% url 'ministry_detail' ministry.pk %}" class="btn btn-sm btn-outline-info">View</a>
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="mb-0">Events</h6>
                                <a href="{% url 'event_create' %}?ministry={{ ministry.pk }}" class="btn btn-sm btn-success">Add Event</a>
                            </div>
                            
                            {% with ministry.event_set.all as events %}
                                {% if events %}
                                    <div class="table-responsive">
                                        <table class="table table-sm">
                                            <thead>
                                                <tr>
                                                    <th>Event</th>
                                                    <th>Type</th>
                                                    <th>Next/Date</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {% for event in events %}
                                                <tr>
                                                    <td>{{ event.title }}</td>
                                                    <td>
                                                        {% if event.is_recurring %}
                                                            <span class="badge bg-info">Recurring</span>
                                                        {% else %}
                                                            <span class="badge bg-success">One-time</span>
                                                        {% endif %}
                                                    </td>
                                                    <td>
                                                        {% if event.is_recurring %}
                                                            {{ event.start_time_of_day }}
                                                        {% else %}
                                                            {{ event.start_datetime|date:"M j, Y g:i A" }}
                                                        {% endif %}
                                                    </td>
                                                    <td>
                                                        <a href="{% url 'event_edit' event.pk %}" class="btn btn-xs btn-outline-primary">Edit</a>
                                                    </td>
                                                </tr>
                                                {% endfor %}
                                            </tbody>
                                        </table>
                                    </div>
                                {% else %}
                                    <p class="text-muted small">No events created yet.</p>
                                {% endif %}
                            {% endwith %}
                        </div>
                    </div>
                {% empty %}
                    <div class="text-center py-4">
                        <p class="text-muted">You haven't created any ministries yet.</p>
                        <a href="{% url 'ministry_create' %}" class="btn btn-primary">Create Your First Ministry</a>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Account Status</h5>
            </div>
            <div class="card-body">
                <p><strong>Status:</strong> 
                    {% if user.status == 'approved' %}
                        <span class="badge bg-success">Approved</span>
                    {% else %}
                        <span class="badge bg-warning">{{ user.status|title }}</span>
                    {% endif %}
                </p>
                <p><strong>Role:</strong> {{ user.get_role_display }}</p>
                <p><strong>Associated Parish:</strong> 
                    {% if user.associated_parish %}
                        {{ user.associated_parish.name }}
                    {% else %}
                        Not assigned
                    {% endif %}
                </p>
            </div>
        </div>
        
        <div class="card mt-3">
            <div class="card-header">
                <h5>Quick Actions</h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <a href="{% url 'ministry_create' %}" class="btn btn-primary">Create Ministry</a>
                    <a href="{% url 'event_create' %}" class="btn btn-success">Create Event</a>
                    <a href="{% url 'event_calendar' %}" class="btn btn-info">View Calendar</a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

================================================================================
FILE: ./core/templates/core/parish_detail.html
================================================================================

{% extends 'core/base.html' %}

{% block title %}{{ parish.name }} - Hogtown Catholic{% endblock %}

{% block content %}
<div class="row">
    <div class="col-md-8">
        <h1>{{ parish.name }}</h1>
        
        <div class="card mb-4">
            <div class="card-header">
                <h5>Contact Information</h5>
            </div>
            <div class="card-body">
                <p><strong>Address:</strong><br>{{ parish.address }}</p>
                {% if parish.phone_number %}
                    <p><strong>Phone:</strong> {{ parish.phone_number }}</p>
                {% endif %}
                {% if parish.website_url %}
                    <p><strong>Website:</strong> 
                        <a href="{{ parish.website_url }}" target="_blank">{{ parish.website_url }}</a>
                    </p>
                {% endif %}
            </div>
        </div>

        {% if parish.mass_schedule %}
        <div class="card mb-4">
            <div class="card-header">
                <h5>Mass Schedule</h5>
            </div>
            <div class="card-body">
                <div style="white-space: pre-line;">{{ parish.mass_schedule }}</div>
            </div>
        </div>
        {% endif %}
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Ministries</h5>
            </div>
            <div class="card-body">
                {% for ministry in ministries %}
                    <div class="mb-3">
                        <h6><a href="{% url 'ministry_detail' ministry.id %}">{{ ministry.name }}</a></h6>
                        <p class="text-muted small">{{ ministry.description|truncatewords:20 }}</p>
                    </div>
                {% empty %}
                    <p class="text-muted">No ministries listed for this parish yet.</p>
                {% endfor %}
            </div>
        </div>
    </div>
</div>

<div class="mt-3">
    <a href="{% url 'parish_directory' %}" class="btn btn-secondary">← Back to Parish Directory</a>
</div>
{% endblock %}

================================================================================
FILE: ./core/templates/core/parish_directory.html
================================================================================

{% extends 'core/base.html' %}

{% block title %}Parish Directory - Hogtown Catholic{% endblock %}

{% block content %}
<div class="row">
    <div class="col-md-12">
        <h1>Catholic Parishes in Gainesville, Florida</h1>
        <p class="lead">Find Catholic parishes, ministries, and events in the Gainesville area.</p>
    </div>
</div>

<div class="row">
    {% for parish in parishes %}
    <div class="col-md-6 col-lg-4 mb-4">
        <div class="card h-100">
            <div class="card-body">
                <h5 class="card-title">{{ parish.name }}</h5>
                <p class="card-text">{{ parish.address }}</p>
                {% if parish.phone_number %}
                    <p class="card-text"><strong>Phone:</strong> {{ parish.phone_number }}</p>
                {% endif %}
                {% if parish.website_url %}
                    <p class="card-text">
                        <a href="{{ parish.website_url }}" target="_blank" class="btn btn-sm btn-outline-primary">
                            Visit Website
                        </a>
                    </p>
                {% endif %}
            </div>
            <div class="card-footer">
                <a href="{% url 'parish_detail' parish.id %}" class="btn btn-primary">View Details</a>
            </div>
        </div>
    </div>
    {% empty %}
    <div class="col-12">
        <div class="alert alert-info" role="alert">
            No parishes found. Please check back later.
        </div>
    </div>
    {% endfor %}
</div>
{% endblock %}

================================================================================
FILE: ./core/templates/core/register.html
================================================================================

{% extends 'core/base.html' %}

{% block title %}Register as Ministry Leader - Hogtown Catholic{% endblock %}

{% block extra_css %}
<script src="https://js.prosopo.io/js/procaptcha.bundle.js" async defer></script>
{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-8">
        <h1>Register as Ministry Leader</h1>
        <p class="text-muted">Join our community of ministry leaders and start sharing your events with the Catholic community in Gainesville.</p>
        
        <form method="post" class="mt-4">
            {% csrf_token %}
            
            {% if form.errors %}
                <div class="alert alert-danger">
                    <h6>Please correct the following errors:</h6>
                    {% for field, errors in form.errors.items %}
                        {% for error in errors %}
                            <p>{{ field }}: {{ error }}</p>
                        {% endfor %}
                    {% endfor %}
                </div>
            {% endif %}
            
            <div class="mb-3">
                <label for="{{ form.full_name.id_for_label }}" class="form-label">Full Name *</label>
                {{ form.full_name }}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.email.id_for_label }}" class="form-label">Email Address *</label>
                {{ form.email }}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.password1.id_for_label }}" class="form-label">Password *</label>
                {{ form.password1 }}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.password2.id_for_label }}" class="form-label">Confirm Password *</label>
                {{ form.password2 }}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.associated_parish.id_for_label }}" class="form-label">Associated Parish *</label>
                {{ form.associated_parish }}
            </div>
            
            <div class="mb-3">
                <label for="{{ form.requested_ministry_details.id_for_label }}" class="form-label">Tell us about your ministry *</label>
                {{ form.requested_ministry_details }}
                <div class="form-text">Please describe the ministry you lead or wish to create, including its purpose and activities.</div>
            </div>
            
            <div class="mb-3">
                {{ form.captcha }}
            </div>
            
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Submit Registration</button>
                <a href="{% url 'parish_directory' %}" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Add Bootstrap classes to form fields
    const inputs = document.querySelectorAll('input, textarea, select');
    inputs.forEach(input => {
        if (!input.classList.contains('form-control') && !input.classList.contains('form-check-input')) {
            input.classList.add('form-control');
        }
    });
});
</script>
{% endblock %}

================================================================================
FILE: ./core/templates/core/registration_success.html
================================================================================

{% extends 'core/base.html' %}

{% block title %}Registration Submitted - Hogtown Catholic{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="alert alert-success">
            <h4 class="alert-heading">Registration Submitted Successfully!</h4>
            <p>Thank you for your submission. Your request is pending review. You will receive an email notification once a decision has been made.</p>
            <hr>
            <p class="mb-0">In the meantime, feel free to browse our <a href="{% url 'parish_directory' %}" class="alert-link">parish directory</a> and <a href="{% url 'event_calendar' %}" class="alert-link">upcoming events</a>.</p>
        </div>
        
        <div class="text-center">
            <a href="{% url 'parish_directory' %}" class="btn btn-primary">Return to Home</a>
        </div>
    </div>
</div>
{% endblock %}

================================================================================
FILE: ./core/templates/core/widgets/prosopo.html
================================================================================

<div{% if widget.attrs.id %} id="{{ widget.attrs.id }}"{% endif %}{% if widget.attrs.class %} class="{{ widget.attrs.class }}"{% endif %}{% for name, value in widget.attrs.items %}{% if name != "id" and name != "class" %} {{ name }}="{{ value }}"{% endif %}{% endfor %}></div>

================================================================================
FILE: ./core/test_admin.py
================================================================================

from unittest.mock import Mock, patch

from django.contrib.admin.sites import AdminSite
from django.contrib.auth import get_user_model
from django.contrib.messages.storage.base import BaseStorage
from django.test import Client, RequestFactory, TestCase

from .admin import UserAdmin
from .models import Parish

User = get_user_model()


class MockRequest:
    def __init__(self, user=None):
        self.user = user or Mock()
        self._messages = BaseStorage(self)

    def build_absolute_uri(self, path):
        return f"http://testserver{path}"


class UserAdminTest(TestCase):
    def setUp(self):
        self.site = AdminSite()
        self.admin = UserAdmin(User, self.site)
        self.factory = RequestFactory()

        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")

        self.admin_user = User.objects.create_user(
            username="admin",
            email="admin@example.com",
            password="testpass123",
            full_name="Admin User",
            role="admin",
            status="approved",
        )

        self.pending_user1 = User.objects.create_user(
            username="pending1",
            email="pending1@example.com",
            password="testpass123",
            full_name="Pending User 1",
            status="pending",
            requested_ministry_details="Youth ministry",
        )

        self.pending_user2 = User.objects.create_user(
            username="pending2",
            email="pending2@example.com",
            password="testpass123",
            full_name="Pending User 2",
            status="pending",
            requested_ministry_details="Music ministry",
        )

        self.approved_user = User.objects.create_user(
            username="approved",
            email="approved@example.com",
            password="testpass123",
            full_name="Approved User",
            status="approved",
        )

    def test_colored_status_display(self):
        # Test pending status
        colored_status = self.admin.colored_status(self.pending_user1)
        self.assertIn("orange", colored_status)
        self.assertIn("Pending", colored_status)

        # Test approved status
        colored_status = self.admin.colored_status(self.approved_user)
        self.assertIn("green", colored_status)
        self.assertIn("Approved", colored_status)

    def test_queryset_ordering(self):
        # Test that pending users appear first
        queryset = self.admin.get_queryset(MockRequest())
        users = list(queryset)

        # Pending users should come first
        pending_users = [u for u in users if u.status == "pending"]
        approved_users = [u for u in users if u.status == "approved"]

        self.assertTrue(len(pending_users) > 0)
        self.assertTrue(len(approved_users) > 0)

    @patch("core.admin.send_mail")
    def test_approve_users_action(self, mock_send_mail):
        request = self.factory.post("/admin/core/user/")
        request.user = self.admin_user
        request._messages = BaseStorage(request)
        queryset = User.objects.filter(status="pending")

        self.admin.approve_users(request, queryset)

        # Check users were approved
        self.pending_user1.refresh_from_db()
        self.pending_user2.refresh_from_db()
        self.assertEqual(self.pending_user1.status, "approved")
        self.assertEqual(self.pending_user2.status, "approved")

        # Check emails were sent
        self.assertEqual(mock_send_mail.call_count, 2)

    @patch("core.admin.send_mail")
    def test_reject_users_action(self, mock_send_mail):
        request = self.factory.post("/admin/core/user/")
        request.user = self.admin_user
        request._messages = BaseStorage(request)
        queryset = User.objects.filter(status="pending")

        self.admin.reject_users(request, queryset)

        # Check users were rejected
        self.pending_user1.refresh_from_db()
        self.pending_user2.refresh_from_db()
        self.assertEqual(self.pending_user1.status, "rejected")
        self.assertEqual(self.pending_user2.status, "rejected")

        # Check emails were sent
        self.assertEqual(mock_send_mail.call_count, 2)

    @patch("core.admin.send_mail")
    def test_approve_non_pending_users(self, mock_send_mail):
        request = self.factory.post("/admin/core/user/")
        request.user = self.admin_user
        request._messages = BaseStorage(request)
        queryset = User.objects.filter(status="approved")  # Already approved users

        self.admin.approve_users(request, queryset)

        # No emails should be sent for already approved users
        mock_send_mail.assert_not_called()

    @patch("core.admin.send_mail")
    def test_email_failure_handling(self, mock_send_mail):
        # Mock email failure
        mock_send_mail.side_effect = Exception("Email service down")

        request = self.factory.post("/admin/core/user/")
        request.user = self.admin_user
        request._messages = BaseStorage(request)
        queryset = User.objects.filter(status="pending")

        # Should not raise exception
        self.admin.approve_users(request, queryset)

        # Users should still be approved even if email fails
        self.pending_user1.refresh_from_db()
        self.assertEqual(self.pending_user1.status, "approved")


class AdminIntegrationTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")

        self.admin_user = User.objects.create_superuser(
            username="admin",
            email="admin@example.com",
            password="testpass123",
            full_name="Admin User",
        )

        self.pending_user = User.objects.create_user(
            username="pending",
            email="pending@example.com",
            password="testpass123",
            full_name="Pending User",
            status="pending",
            requested_ministry_details="Youth ministry",
        )

    def test_admin_login_required(self):
        response = self.client.get("/admin/")
        self.assertEqual(response.status_code, 302)  # Redirect to login

    def test_admin_user_list_view(self):
        self.client.force_login(self.admin_user)
        response = self.client.get("/admin/core/user/")
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Pending User")

    def test_admin_user_detail_view(self):
        self.client.force_login(self.admin_user)
        response = self.client.get(f"/admin/core/user/{self.pending_user.id}/change/")
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "requested_ministry_details")

    @patch("core.admin.send_mail")
    def test_admin_bulk_actions(self, mock_send_mail):
        self.client.force_login(self.admin_user)

        # Test bulk approve action
        response = self.client.post(
            "/admin/core/user/",
            {
                "action": "approve_users",
                "_selected_action": [str(self.pending_user.id)],
            },
            follow=True,
        )

        self.assertEqual(response.status_code, 200)

        self.pending_user.refresh_from_db()
        self.assertEqual(self.pending_user.status, "approved")
        mock_send_mail.assert_called()


================================================================================
FILE: ./core/test_authentication.py
================================================================================

from django.test import Client, TestCase
from django.urls import reverse

from .backends import ApprovedUserBackend
from .models import Parish, User


class ApprovedUserBackendTest(TestCase):
    def setUp(self):
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")
        self.backend = ApprovedUserBackend()

        # Create users with different statuses
        self.pending_user = User.objects.create_user(
            username="pending_user",
            email="pending@example.com",
            password="testpass123",
            full_name="Pending User",
            status="pending",
        )

        self.approved_user = User.objects.create_user(
            username="approved_user",
            email="approved@example.com",
            password="testpass123",
            full_name="Approved User",
            status="approved",
        )

        self.rejected_user = User.objects.create_user(
            username="rejected_user",
            email="rejected@example.com",
            password="testpass123",
            full_name="Rejected User",
            status="rejected",
        )

    def test_authenticate_approved_user(self):
        user = self.backend.authenticate(
            request=None, username="approved_user", password="testpass123"
        )
        self.assertEqual(user, self.approved_user)

    def test_authenticate_pending_user_fails(self):
        user = self.backend.authenticate(
            request=None, username="pending_user", password="testpass123"
        )
        self.assertIsNone(user)

    def test_authenticate_rejected_user_fails(self):
        user = self.backend.authenticate(
            request=None, username="rejected_user", password="testpass123"
        )
        self.assertIsNone(user)

    def test_authenticate_invalid_credentials(self):
        user = self.backend.authenticate(
            request=None, username="approved_user", password="wrongpassword"
        )
        self.assertIsNone(user)

    def test_authenticate_nonexistent_user(self):
        user = self.backend.authenticate(
            request=None, username="nonexistent", password="testpass123"
        )
        self.assertIsNone(user)


class LoginViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")

        self.approved_user = User.objects.create_user(
            username="approved_user",
            email="approved@example.com",
            password="testpass123",
            full_name="Approved User",
            status="approved",
        )

        self.pending_user = User.objects.create_user(
            username="pending_user",
            email="pending@example.com",
            password="testpass123",
            full_name="Pending User",
            status="pending",
        )

    def test_login_page_loads(self):
        response = self.client.get(reverse("login"))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Ministry Leader Login")
        self.assertContains(response, "Register as Ministry Leader")

    def test_approved_user_can_login(self):
        response = self.client.post(
            reverse("login"), {"username": "approved_user", "password": "testpass123"}
        )
        self.assertEqual(response.status_code, 302)  # Redirect after successful login
        self.assertTrue(self.client.session.get("_auth_user_id"))

    def test_pending_user_cannot_login(self):
        response = self.client.post(
            reverse("login"), {"username": "pending_user", "password": "testpass123"}
        )
        self.assertEqual(response.status_code, 200)  # Stays on login page
        self.assertFalse(self.client.session.get("_auth_user_id"))

    def test_login_required_views_redirect(self):
        response = self.client.get(reverse("ministry_portal"))
        self.assertEqual(response.status_code, 302)  # Redirect to login
        self.assertIn("/login/", response.url)

    def test_approved_user_can_access_protected_views(self):
        self.client.login(username="approved_user", password="testpass123")
        response = self.client.get(reverse("ministry_portal"))
        self.assertEqual(response.status_code, 200)

    def test_logout_functionality(self):
        self.client.login(username="approved_user", password="testpass123")
        self.assertTrue(self.client.session.get("_auth_user_id"))

        response = self.client.post(reverse("logout"))
        self.assertEqual(response.status_code, 302)  # Redirect after logout
        self.assertFalse(self.client.session.get("_auth_user_id"))


================================================================================
FILE: ./core/test_email.py
================================================================================

from unittest.mock import Mock, patch

from django.contrib.auth import get_user_model
from django.core import mail
from django.template.loader import render_to_string
from django.test import TestCase

from .models import Parish

User = get_user_model()


class EmailTemplateTest(TestCase):
    def setUp(self):
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")
        self.user = User.objects.create_user(
            username="testuser",
            email="test@example.com",
            password="testpass123",
            full_name="Test User",
            associated_parish=self.parish,
            requested_ministry_details="I want to start a youth ministry.",
        )

    def test_admin_notification_email_templates(self):
        context = {"user": self.user, "admin_url": "http://testserver/admin/core/user/"}

        subject = render_to_string(
            "core/emails/admin_notification_subject.txt", context
        ).strip()
        message = render_to_string("core/emails/admin_notification_body.txt", context)

        self.assertEqual(subject, "New Ministry Leader Registration Request")
        self.assertIn("Test User", message)
        self.assertIn("test@example.com", message)
        self.assertIn("Test Parish", message)
        self.assertIn("youth ministry", message)
        self.assertIn("http://testserver/admin/core/user/", message)

    def test_approval_email_templates(self):
        context = {"user": self.user, "login_url": "http://testserver/login/"}

        subject = render_to_string("core/emails/approval_subject.txt", context).strip()
        message = render_to_string("core/emails/approval_body.txt", context)

        self.assertEqual(subject, "Your Hogtown Catholic Account is Approved")
        self.assertIn("Test User", message)
        self.assertIn("approved", message)
        self.assertIn("http://testserver/login/", message)

    def test_rejection_email_templates(self):
        context = {"user": self.user}

        subject = render_to_string("core/emails/rejection_subject.txt", context).strip()
        message = render_to_string("core/emails/rejection_body.txt", context)

        self.assertEqual(subject, "Hogtown Catholic Account Update")
        self.assertIn("Test User", message)
        self.assertIn("not approved", message)


class EmailIntegrationTest(TestCase):
    def setUp(self):
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")

        self.admin_user = User.objects.create_user(
            username="admin",
            email="admin@example.com",
            password="testpass123",
            full_name="Admin User",
            role="admin",
            status="approved",
        )

    @patch("core.views.send_mail")
    def test_registration_sends_admin_notification(self, mock_send_mail):
        from django.test import Client
        from django.urls import reverse

        client = Client()

        with patch("core.fields.requests.post") as mock_captcha:
            # Mock successful captcha
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.json.return_value = {"success": True}
            mock_captcha.return_value = mock_response

            response = client.post(
                reverse("register"),
                {
                    "username": "newuser",
                    "email": "newuser@example.com",
                    "full_name": "New User",
                    "password1": "testpass123!",
                    "password2": "testpass123!",
                    "associated_parish": self.parish.id,
                    "requested_ministry_details": "Youth ministry",
                    "procaptcha-response": "valid-token",
                },
            )

            self.assertEqual(response.status_code, 302)
            mock_send_mail.assert_called()

            # Check the email was sent with correct parameters
            call_args = mock_send_mail.call_args
            self.assertIn(
                "New Ministry Leader Registration Request", call_args[1]["subject"]
            )
            self.assertIn("admin@example.com", call_args[1]["recipient_list"])

    def test_email_backend_configuration(self):
        # Test that email backend is configured for testing
        from django.conf import settings

        # In tests, Django automatically uses locmem backend
        self.assertIn("EmailBackend", settings.EMAIL_BACKEND)

    def test_email_sending_with_console_backend(self):
        # Test actual email sending using Django's test email backend
        from django.conf import settings
        from django.core.mail import send_mail

        # Temporarily change to locmem backend for testing
        original_backend = settings.EMAIL_BACKEND
        settings.EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"

        try:
            send_mail(
                subject="Test Subject",
                message="Test message",
                from_email="test@example.com",
                recipient_list=["recipient@example.com"],
            )

            self.assertEqual(len(mail.outbox), 1)
            self.assertEqual(mail.outbox[0].subject, "Test Subject")
            self.assertEqual(mail.outbox[0].to, ["recipient@example.com"])
        finally:
            settings.EMAIL_BACKEND = original_backend

    def test_email_template_context_variables(self):
        # Test that all required context variables are available in templates
        user = User.objects.create_user(
            username="contextuser",
            email="context@example.com",
            password="testpass123",
            full_name="Context User",
            associated_parish=self.parish,
            requested_ministry_details="Context ministry details",
        )

        # Test admin notification context
        admin_context = {"user": user, "admin_url": "http://testserver/admin/"}

        admin_message = render_to_string(
            "core/emails/admin_notification_body.txt", admin_context
        )
        self.assertIn(user.full_name, admin_message)
        self.assertIn(user.email, admin_message)
        self.assertIn(user.associated_parish.name, admin_message)
        self.assertIn(user.requested_ministry_details, admin_message)
        self.assertIn(admin_context["admin_url"], admin_message)

        # Test approval context
        approval_context = {"user": user, "login_url": "http://testserver/login/"}

        approval_message = render_to_string(
            "core/emails/approval_body.txt", approval_context
        )
        self.assertIn(user.full_name, approval_message)
        self.assertIn(approval_context["login_url"], approval_message)


================================================================================
FILE: ./core/test_forms.py
================================================================================

from unittest.mock import Mock, patch

import requests

from django.test import TestCase

from .forms import MinistryLeaderRegistrationForm
from .models import Parish, User


class MinistryLeaderRegistrationFormTest(TestCase):
    def setUp(self):
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")

        self.valid_form_data = {
            "username": "testuser",
            "email": "test@example.com",
            "full_name": "Test User",
            "password1": "testpass123!",
            "password2": "testpass123!",
            "associated_parish": self.parish.id,
            "requested_ministry_details": "I want to start a youth ministry focused on community service.",
            "captcha": "valid-captcha-token",
        }

    @patch("core.fields.requests.post")
    def test_valid_form_submission(self, mock_post):
        # Mock successful captcha verification
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"success": True}
        mock_post.return_value = mock_response

        form = MinistryLeaderRegistrationForm(data=self.valid_form_data)
        self.assertTrue(form.is_valid())

    @patch("core.fields.requests.post")
    def test_invalid_captcha(self, mock_post):
        # Mock failed captcha verification
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"success": False}
        mock_post.return_value = mock_response

        form = MinistryLeaderRegistrationForm(data=self.valid_form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("captcha", form.errors)

    @patch("core.fields.requests.post")
    def test_captcha_network_error(self, mock_post):
        # Mock network error during captcha verification
        mock_post.side_effect = requests.RequestException("Network error")

        form = MinistryLeaderRegistrationForm(data=self.valid_form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("captcha", form.errors)

    def test_missing_required_fields(self):
        form_data = self.valid_form_data.copy()
        form_data.pop("full_name")
        form_data.pop("requested_ministry_details")

        form = MinistryLeaderRegistrationForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("full_name", form.errors)
        self.assertIn("requested_ministry_details", form.errors)

    def test_password_mismatch(self):
        form_data = self.valid_form_data.copy()
        form_data["password2"] = "differentpassword"

        form = MinistryLeaderRegistrationForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("password2", form.errors)

    def test_invalid_email(self):
        form_data = self.valid_form_data.copy()
        form_data["email"] = "invalid-email"

        form = MinistryLeaderRegistrationForm(data=form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("email", form.errors)

    @patch("core.fields.requests.post")
    def test_form_save(self, mock_post):
        # Mock successful captcha verification
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"success": True}
        mock_post.return_value = mock_response

        form = MinistryLeaderRegistrationForm(data=self.valid_form_data)
        self.assertTrue(form.is_valid())

        user = form.save()

        self.assertEqual(user.username, "testuser")
        self.assertEqual(user.email, "test@example.com")
        self.assertEqual(user.full_name, "Test User")
        self.assertEqual(user.associated_parish, self.parish)
        self.assertEqual(
            user.requested_ministry_details,
            "I want to start a youth ministry focused on community service.",
        )
        self.assertEqual(user.role, "leader")
        self.assertEqual(user.status, "pending")

    def test_duplicate_username(self):
        User.objects.create_user(
            username="testuser", email="existing@example.com", password="testpass123"
        )

        form = MinistryLeaderRegistrationForm(data=self.valid_form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("username", form.errors)

    @patch("core.fields.requests.post")
    def test_duplicate_email(self, mock_post):
        # Mock successful captcha verification
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"success": True}
        mock_post.return_value = mock_response

        User.objects.create_user(
            username="existinguser", email="test@example.com", password="testpass123"
        )

        form = MinistryLeaderRegistrationForm(data=self.valid_form_data)
        self.assertFalse(form.is_valid())
        self.assertIn("email", form.errors)

    def test_parish_dropdown_choices(self):
        parish2 = Parish.objects.create(name="Second Parish", address="456 Test Ave")

        form = MinistryLeaderRegistrationForm()

        parish_choices = form.fields["associated_parish"].queryset
        self.assertIn(self.parish, parish_choices)
        self.assertIn(parish2, parish_choices)
        self.assertEqual(parish_choices.count(), 2)


================================================================================
FILE: ./core/test_models.py
================================================================================

from datetime import date, datetime, time

from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.test import TestCase
from django.utils import timezone

from .models import Category, Event, EventException, Ministry, Parish

User = get_user_model()


class ParishModelTest(TestCase):
    def setUp(self):
        self.parish = Parish.objects.create(
            name="Test Parish",
            address="123 Test St, Test City, FL 32601",
            website_url="https://testparish.org",
            phone_number="(352) 555-1234",
            mass_schedule="Saturday 6:00 PM, Sunday 8:00 AM & 10:30 AM",
        )

    def test_parish_creation(self):
        self.assertEqual(self.parish.name, "Test Parish")
        self.assertEqual(str(self.parish), "Test Parish")

    def test_parish_fields(self):
        self.assertTrue(self.parish.address)
        self.assertTrue(self.parish.website_url)
        self.assertTrue(self.parish.phone_number)
        self.assertTrue(self.parish.mass_schedule)


class UserModelTest(TestCase):
    def setUp(self):
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")

    def test_user_creation_defaults(self):
        user = User.objects.create_user(
            username="testuser",
            email="test@example.com",
            password="testpass123",
            full_name="Test User",
        )
        self.assertEqual(user.role, "leader")
        self.assertEqual(user.status, "pending")
        self.assertEqual(str(user), "Test User (test@example.com)")

    def test_user_with_parish(self):
        user = User.objects.create_user(
            username="testuser",
            email="test@example.com",
            password="testpass123",
            full_name="Test User",
            associated_parish=self.parish,
        )
        self.assertEqual(user.associated_parish, self.parish)

    def test_user_role_choices(self):
        admin_user = User.objects.create_user(
            username="admin",
            email="admin@example.com",
            password="testpass123",
            full_name="Admin User",
            role="admin",
        )
        self.assertEqual(admin_user.role, "admin")

    def test_user_status_choices(self):
        user = User.objects.create_user(
            username="testuser",
            email="test@example.com",
            password="testpass123",
            full_name="Test User",
            status="approved",
        )
        self.assertEqual(user.status, "approved")


class CategoryModelTest(TestCase):
    def test_category_creation(self):
        category = Category.objects.create(name="Service & Outreach")
        self.assertEqual(str(category), "Service & Outreach")

    def test_category_unique_name(self):
        Category.objects.create(name="Unique Category")
        with self.assertRaises(Exception):
            Category.objects.create(name="Unique Category")


class MinistryModelTest(TestCase):
    def setUp(self):
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")
        self.user = User.objects.create_user(
            username="testuser",
            email="test@example.com",
            password="testpass123",
            full_name="Test User",
        )
        self.category = Category.objects.create(name="Test Category")

    def test_ministry_creation(self):
        ministry = Ministry.objects.create(
            owner_user=self.user,
            associated_parish=self.parish,
            name="Test Ministry",
            description="A test ministry",
            contact_info="Contact info here",
        )
        ministry.categories.add(self.category)

        self.assertEqual(str(ministry), "Test Ministry")
        self.assertEqual(ministry.owner_user, self.user)
        self.assertEqual(ministry.associated_parish, self.parish)
        self.assertIn(self.category, ministry.categories.all())


class EventModelTest(TestCase):
    def setUp(self):
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")
        self.user = User.objects.create_user(
            username="testuser",
            email="test@example.com",
            password="testpass123",
            full_name="Test User",
        )
        self.ministry = Ministry.objects.create(
            owner_user=self.user,
            associated_parish=self.parish,
            name="Test Ministry",
            description="A test ministry",
            contact_info="Contact info here",
        )

    def test_adhoc_event_creation(self):
        event = Event.objects.create(
            associated_ministry=self.ministry,
            title="Test Event",
            description="A test event",
            location="Test Location",
            is_recurring=False,
            start_datetime=timezone.make_aware(datetime(2025, 1, 15, 19, 0)),
            end_datetime=timezone.make_aware(datetime(2025, 1, 15, 21, 0)),
        )
        self.assertEqual(str(event), "Test Event")
        self.assertFalse(event.is_recurring)

    def test_recurring_event_creation(self):
        event = Event.objects.create(
            associated_ministry=self.ministry,
            title="Weekly Meeting",
            description="Weekly ministry meeting",
            location="Parish Hall",
            is_recurring=True,
            series_start_date=date(2025, 1, 1),
            series_end_date=date(2025, 12, 31),
            start_time_of_day=time(19, 0),
            end_time_of_day=time(21, 0),
            recurrence_rule="FREQ=WEEKLY;BYDAY=WE",
        )
        self.assertTrue(event.is_recurring)
        self.assertEqual(event.recurrence_rule, "FREQ=WEEKLY;BYDAY=WE")

    def test_event_validation_adhoc(self):
        event = Event(
            associated_ministry=self.ministry,
            title="Invalid Event",
            description="Missing dates",
            location="Test Location",
            is_recurring=False
            # Missing start_datetime and end_datetime
        )
        with self.assertRaises(ValidationError):
            event.clean()

    def test_event_validation_recurring(self):
        event = Event(
            associated_ministry=self.ministry,
            title="Invalid Recurring Event",
            description="Missing recurrence data",
            location="Test Location",
            is_recurring=True
            # Missing required recurring fields
        )
        with self.assertRaises(ValidationError):
            event.clean()


class EventExceptionModelTest(TestCase):
    def setUp(self):
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")
        self.user = User.objects.create_user(
            username="testuser",
            email="test@example.com",
            password="testpass123",
            full_name="Test User",
        )
        self.ministry = Ministry.objects.create(
            owner_user=self.user,
            associated_parish=self.parish,
            name="Test Ministry",
            description="A test ministry",
            contact_info="Contact info here",
        )
        self.event = Event.objects.create(
            associated_ministry=self.ministry,
            title="Weekly Meeting",
            description="Weekly ministry meeting",
            location="Parish Hall",
            is_recurring=True,
            series_start_date=date(2025, 1, 1),
            start_time_of_day=time(19, 0),
            end_time_of_day=time(21, 0),
            recurrence_rule="FREQ=WEEKLY;BYDAY=WE",
        )

    def test_cancelled_exception(self):
        exception = EventException.objects.create(
            event=self.event,
            original_occurrence_date=date(2025, 1, 15),
            status="cancelled",
        )
        self.assertEqual(exception.status, "cancelled")
        self.assertIn("cancelled", str(exception))

    def test_rescheduled_exception(self):
        exception = EventException.objects.create(
            event=self.event,
            original_occurrence_date=date(2025, 1, 15),
            status="rescheduled",
            new_start_datetime=timezone.make_aware(datetime(2025, 1, 16, 20, 0)),
            new_end_datetime=timezone.make_aware(datetime(2025, 1, 16, 22, 0)),
        )
        self.assertEqual(exception.status, "rescheduled")
        self.assertTrue(exception.new_start_datetime)
        self.assertTrue(exception.new_end_datetime)

    def test_rescheduled_exception_validation(self):
        exception = EventException(
            event=self.event,
            original_occurrence_date=date(2025, 1, 15),
            status="rescheduled"
            # Missing new_start_datetime and new_end_datetime
        )
        with self.assertRaises(ValidationError):
            exception.clean()

    def test_unique_together_constraint(self):
        EventException.objects.create(
            event=self.event,
            original_occurrence_date=date(2025, 1, 15),
            status="cancelled",
        )
        with self.assertRaises(Exception):
            EventException.objects.create(
                event=self.event,
                original_occurrence_date=date(2025, 1, 15),
                status="rescheduled",
            )


================================================================================
FILE: ./core/test_views.py
================================================================================

from datetime import datetime
from unittest.mock import Mock, patch

from django.contrib.auth import get_user_model
from django.test import Client, TestCase
from django.urls import reverse
from django.utils import timezone

from .models import Event, Ministry, Parish

User = get_user_model()


class PublicViewsTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.parish = Parish.objects.create(
            name="Test Parish",
            address="123 Test St, Test City, FL 32601",
            website_url="https://testparish.org",
            phone_number="(352) 555-1234",
        )

    def test_parish_directory_view(self):
        response = self.client.get(reverse("parish_directory"))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Test Parish")

    def test_parish_detail_view(self):
        response = self.client.get(reverse("parish_detail", args=[self.parish.id]))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Test Parish")

    def test_event_calendar_view(self):
        response = self.client.get(reverse("event_calendar"))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Events")

    def test_parish_detail_404(self):
        response = self.client.get(reverse("parish_detail", args=[99999]))
        self.assertEqual(response.status_code, 404)


class RegistrationViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")

        # Create an admin user for email notifications
        self.admin_user = User.objects.create_user(
            username="admin",
            email="admin@example.com",
            password="testpass123",
            full_name="Admin User",
            role="admin",
            status="approved",
        )

    def test_registration_page_loads(self):
        response = self.client.get(reverse("register"))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Register as Ministry Leader")
        self.assertContains(response, "Full Name")
        self.assertContains(response, "Tell us about your ministry")

    @patch("core.views.send_mail")
    @patch("core.fields.requests.post")
    def test_successful_registration(self, mock_captcha_post, mock_send_mail):
        # Mock successful captcha verification
        mock_captcha_response = Mock()
        mock_captcha_response.status_code = 200
        mock_captcha_response.json.return_value = {"success": True}
        mock_captcha_post.return_value = mock_captcha_response

        response = self.client.post(
            reverse("register"),
            {
                "username": "newuser",
                "email": "newuser@example.com",
                "full_name": "New User",
                "password1": "testpass123!",
                "password2": "testpass123!",
                "associated_parish": self.parish.id,
                "requested_ministry_details": "I want to start a youth ministry.",
                "procaptcha-response": "valid-token",
            },
        )

        self.assertEqual(response.status_code, 302)  # Redirect to success page
        self.assertEqual(response.url, reverse("registration_success"))

        # Check user was created
        user = User.objects.get(username="newuser")
        self.assertEqual(user.email, "newuser@example.com")
        self.assertEqual(user.status, "pending")
        self.assertEqual(user.role, "leader")

        # Check admin notification email was sent
        mock_send_mail.assert_called()

    @patch("core.fields.requests.post")
    def test_registration_with_invalid_captcha(self, mock_captcha_post):
        # Mock failed captcha verification
        mock_captcha_response = Mock()
        mock_captcha_response.status_code = 200
        mock_captcha_response.json.return_value = {"success": False}
        mock_captcha_post.return_value = mock_captcha_response

        response = self.client.post(
            reverse("register"),
            {
                "username": "newuser",
                "email": "newuser@example.com",
                "full_name": "New User",
                "password1": "testpass123!",
                "password2": "testpass123!",
                "associated_parish": self.parish.id,
                "requested_ministry_details": "I want to start a youth ministry.",
                "procaptcha-response": "invalid-token",
            },
        )

        self.assertEqual(response.status_code, 200)  # Stays on form
        self.assertContains(response, "error")

        # Check user was not created
        self.assertFalse(User.objects.filter(username="newuser").exists())

    def test_registration_success_page(self):
        response = self.client.get(reverse("registration_success"))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Registration Submitted Successfully")
        self.assertContains(response, "pending review")


class MinistryPortalViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")

        self.user = User.objects.create_user(
            username="testuser",
            email="test@example.com",
            password="testpass123",
            full_name="Test User",
            status="approved",
        )

        self.ministry = Ministry.objects.create(
            owner_user=self.user,
            associated_parish=self.parish,
            name="Test Ministry",
            description="A test ministry",
            contact_info="Contact info",
        )

    def test_ministry_portal_requires_login(self):
        response = self.client.get(reverse("ministry_portal"))
        self.assertEqual(response.status_code, 302)
        self.assertIn("/login/", response.url)

    def test_ministry_portal_with_login(self):
        self.client.login(username="testuser", password="testpass123")
        response = self.client.get(reverse("ministry_portal"))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Test Ministry")

    def test_ministry_detail_view(self):
        response = self.client.get(reverse("ministry_detail", args=[self.ministry.id]))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Test Ministry")


class EventViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")

        self.user = User.objects.create_user(
            username="testuser",
            email="test@example.com",
            password="testpass123",
            full_name="Test User",
            status="approved",
        )

        self.ministry = Ministry.objects.create(
            owner_user=self.user,
            associated_parish=self.parish,
            name="Test Ministry",
            description="A test ministry",
            contact_info="Contact info",
        )

    def test_event_create_requires_login(self):
        response = self.client.get(reverse("event_create"))
        self.assertEqual(response.status_code, 302)
        self.assertIn("/login/", response.url)

    def test_event_create_form_loads(self):
        self.client.login(username="testuser", password="testpass123")
        response = self.client.get(reverse("event_create"))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Create New Event")
        self.assertContains(response, "This is a recurring event")

    def test_create_adhoc_event(self):
        self.client.login(username="testuser", password="testpass123")
        response = self.client.post(
            reverse("event_create"),
            {
                "associated_ministry": self.ministry.id,
                "title": "Test Event",
                "description": "A test event",
                "location": "Test Location",
                "is_recurring": False,
                "start_datetime": "2025-06-15T19:00",
                "end_datetime": "2025-06-15T21:00",
            },
        )

        self.assertEqual(response.status_code, 302)  # Redirect after creation

        event = Event.objects.get(title="Test Event")
        self.assertFalse(event.is_recurring)
        self.assertEqual(event.associated_ministry, self.ministry)

    def test_create_recurring_event(self):
        self.client.login(username="testuser", password="testpass123")
        response = self.client.post(
            reverse("event_create"),
            {
                "associated_ministry": self.ministry.id,
                "title": "Weekly Meeting",
                "description": "Weekly ministry meeting",
                "location": "Parish Hall",
                "is_recurring": True,
                "series_start_date": "2025-01-01",
                "series_end_date": "2025-12-31",
                "start_time_of_day": "19:00",
                "end_time_of_day": "21:00",
                "recurrence_rule": "FREQ=WEEKLY;BYDAY=WE",
            },
        )

        self.assertEqual(response.status_code, 302)  # Redirect after creation

        event = Event.objects.get(title="Weekly Meeting")
        self.assertTrue(event.is_recurring)
        self.assertEqual(event.recurrence_rule, "FREQ=WEEKLY;BYDAY=WE")


class CalendarAPIViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.parish = Parish.objects.create(name="Test Parish", address="123 Test St")

        self.user = User.objects.create_user(
            username="testuser",
            email="test@example.com",
            password="testpass123",
            full_name="Test User",
            status="approved",
        )

        self.ministry = Ministry.objects.create(
            owner_user=self.user,
            associated_parish=self.parish,
            name="Test Ministry",
            description="A test ministry",
            contact_info="Contact info",
        )

        # Create test events
        self.adhoc_event = Event.objects.create(
            associated_ministry=self.ministry,
            title="Test Event",
            description="A test event",
            location="Test Location",
            is_recurring=False,
            start_datetime=timezone.make_aware(datetime(2025, 6, 15, 19, 0)),
            end_datetime=timezone.make_aware(datetime(2025, 6, 15, 21, 0)),
        )

    def test_calendar_events_api(self):
        response = self.client.get(
            reverse("calendar_events_api"),
            {"start": "2025-06-01T00:00:00Z", "end": "2025-06-30T23:59:59Z"},
        )

        self.assertEqual(response.status_code, 200)
        data = response.json()
        self.assertIn("events", data)
        self.assertEqual(len(data["events"]), 1)
        self.assertEqual(data["events"][0]["title"], "Test Event")

    def test_calendar_events_api_no_params(self):
        response = self.client.get(reverse("calendar_events_api"))
        self.assertEqual(response.status_code, 200)
        data = response.json()
        self.assertEqual(data["events"], [])


================================================================================
FILE: ./core/urls.py
================================================================================

from django.contrib.auth import views as auth_views
from django.urls import path

from . import views

urlpatterns = [
    # Public views
    path("", views.parish_directory, name="parish_directory"),
    path("parish/<int:parish_id>/", views.parish_detail, name="parish_detail"),
    path("ministry/<int:ministry_id>/", views.ministry_detail, name="ministry_detail"),
    path("calendar/", views.event_calendar, name="event_calendar"),
    path("api/calendar-events/", views.get_calendar_events, name="calendar_events_api"),
    # Authentication
    path(
        "login/",
        auth_views.LoginView.as_view(template_name="core/login.html"),
        name="login",
    ),
    path("logout/", auth_views.LogoutView.as_view(), name="logout"),
    path("register/", views.register_ministry_leader, name="register"),
    path(
        "registration-success/", views.registration_success, name="registration_success"
    ),
    # Ministry Leader Portal
    path("portal/", views.ministry_portal, name="ministry_portal"),
    path(
        "ministry/create/", views.MinistryCreateView.as_view(), name="ministry_create"
    ),
    path(
        "ministry/<int:pk>/edit/",
        views.MinistryUpdateView.as_view(),
        name="ministry_edit",
    ),
    path("event/create/", views.EventCreateView.as_view(), name="event_create"),
    path("event/<int:pk>/edit/", views.EventUpdateView.as_view(), name="event_edit"),
    path(
        "event/<int:event_id>/occurrence/<str:occurrence_date>/action/",
        views.event_occurrence_action,
        name="event_occurrence_action",
    ),
]


================================================================================
FILE: ./core/views.py
================================================================================

from datetime import datetime

from dateutil.rrule import rrulestr

from django.conf import settings
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.mail import send_mail
from django.db import models
from django.http import JsonResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.template.loader import render_to_string
from django.urls import reverse_lazy
from django.views.generic import CreateView, UpdateView

from .forms import MinistryLeaderRegistrationForm
from .models import Category, Event, EventException, Ministry, Parish, User


def parish_directory(request):
    parishes = Parish.objects.all().order_by("name")
    return render(request, "core/parish_directory.html", {"parishes": parishes})


def parish_detail(request, parish_id):
    parish = get_object_or_404(Parish, pk=parish_id)
    ministries = Ministry.objects.filter(associated_parish=parish).order_by("name")
    return render(
        request, "core/parish_detail.html", {"parish": parish, "ministries": ministries}
    )


def ministry_detail(request, ministry_id):
    ministry = get_object_or_404(Ministry, pk=ministry_id)
    events = Event.objects.filter(associated_ministry=ministry)
    return render(
        request, "core/ministry_detail.html", {"ministry": ministry, "events": events}
    )


def event_calendar(request):
    categories = Category.objects.all()
    parishes = Parish.objects.all()
    return render(
        request,
        "core/event_calendar.html",
        {"categories": categories, "parishes": parishes},
    )


def get_calendar_events(request):
    start_date = request.GET.get("start")
    end_date = request.GET.get("end")

    if not start_date or not end_date:
        return JsonResponse({"events": []})

    start = datetime.fromisoformat(start_date.replace("Z", "+00:00")).date()
    end = datetime.fromisoformat(end_date.replace("Z", "+00:00")).date()

    events = []

    # Get ad-hoc events
    adhoc_events = Event.objects.filter(
        is_recurring=False, start_datetime__date__range=[start, end]
    ).select_related("associated_ministry__associated_parish")

    for event in adhoc_events:
        events.append(
            {
                "id": f"adhoc_{event.id}",
                "title": event.title,
                "start": event.start_datetime.isoformat(),
                "end": event.end_datetime.isoformat(),
                "description": event.description,
                "location": event.location,
                "ministry": event.associated_ministry.name,
                "parish": event.associated_ministry.associated_parish.name,
            }
        )

    # Get recurring events
    recurring_events = (
        Event.objects.filter(
            is_recurring=True,
            series_start_date__lte=end,
        )
        .filter(
            models.Q(series_end_date__isnull=True)
            | models.Q(series_end_date__gte=start)
        )
        .select_related("associated_ministry__associated_parish")
    )

    for event in recurring_events:
        if event.recurrence_rule:
            try:
                # Parse the recurrence rule
                dtstart = datetime.combine(
                    event.series_start_date, event.start_time_of_day
                )
                rrule = rrulestr(event.recurrence_rule, dtstart=dtstart)

                # Get occurrences in the date range
                occurrences = rrule.between(
                    datetime.combine(start, datetime.min.time()),
                    datetime.combine(end, datetime.max.time()),
                    inc=True,
                )

                # Get exceptions for this event
                exceptions = EventException.objects.filter(
                    event=event, original_occurrence_date__range=[start, end]
                )
                exception_dict = {
                    exc.original_occurrence_date: exc for exc in exceptions
                }

                for occurrence in occurrences:
                    occurrence_date = occurrence.date()

                    # Check if this occurrence has an exception
                    if occurrence_date in exception_dict:
                        exception = exception_dict[occurrence_date]
                        if exception.status == "cancelled":
                            continue
                        elif exception.status == "rescheduled":
                            events.append(
                                {
                                    "id": f"recurring_{event.id}_{occurrence_date}",
                                    "title": f"{event.title} (Rescheduled)",
                                    "start": exception.new_start_datetime.isoformat(),
                                    "end": exception.new_end_datetime.isoformat(),
                                    "description": event.description,
                                    "location": event.location,
                                    "ministry": event.associated_ministry.name,
                                    "parish": event.associated_ministry.associated_parish.name,
                                }
                            )
                            continue

                    # Normal occurrence
                    start_dt = datetime.combine(
                        occurrence_date, event.start_time_of_day
                    )
                    end_dt = datetime.combine(occurrence_date, event.end_time_of_day)

                    events.append(
                        {
                            "id": f"recurring_{event.id}_{occurrence_date}",
                            "title": event.title,
                            "start": start_dt.isoformat(),
                            "end": end_dt.isoformat(),
                            "description": event.description,
                            "location": event.location,
                            "ministry": event.associated_ministry.name,
                            "parish": event.associated_ministry.associated_parish.name,
                        }
                    )

            except Exception:
                # Log error in production
                continue

    return JsonResponse({"events": events})


@login_required
def ministry_portal(request):
    user_ministries = Ministry.objects.filter(owner_user=request.user)
    return render(request, "core/ministry_portal.html", {"ministries": user_ministries})


class MinistryCreateView(LoginRequiredMixin, CreateView):
    model = Ministry
    fields = ["associated_parish", "name", "description", "contact_info", "categories"]
    template_name = "core/ministry_form.html"
    success_url = reverse_lazy("ministry_portal")

    def form_valid(self, form):
        form.instance.owner_user = self.request.user
        return super().form_valid(form)


class MinistryUpdateView(LoginRequiredMixin, UpdateView):
    model = Ministry
    fields = ["associated_parish", "name", "description", "contact_info", "categories"]
    template_name = "core/ministry_form.html"
    success_url = reverse_lazy("ministry_portal")

    def get_queryset(self):
        return Ministry.objects.filter(owner_user=self.request.user)


class EventCreateView(LoginRequiredMixin, CreateView):
    model = Event
    fields = [
        "associated_ministry",
        "title",
        "description",
        "location",
        "is_recurring",
        "start_datetime",
        "end_datetime",
        "series_start_date",
        "series_end_date",
        "start_time_of_day",
        "end_time_of_day",
        "recurrence_rule",
    ]
    template_name = "core/event_form.html"
    success_url = reverse_lazy("ministry_portal")

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        # Limit ministry choices to user's ministries
        form.fields["associated_ministry"].queryset = Ministry.objects.filter(
            owner_user=self.request.user
        )
        return form


class EventUpdateView(LoginRequiredMixin, UpdateView):
    model = Event
    fields = [
        "associated_ministry",
        "title",
        "description",
        "location",
        "is_recurring",
        "start_datetime",
        "end_datetime",
        "series_start_date",
        "series_end_date",
        "start_time_of_day",
        "end_time_of_day",
        "recurrence_rule",
    ]
    template_name = "core/event_form.html"
    success_url = reverse_lazy("ministry_portal")

    def get_queryset(self):
        return Event.objects.filter(associated_ministry__owner_user=self.request.user)

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        form.fields["associated_ministry"].queryset = Ministry.objects.filter(
            owner_user=self.request.user
        )
        return form


@login_required
def event_occurrence_action(request, event_id, occurrence_date):
    """Handle actions on individual event occurrences (cancel/reschedule)"""
    event = get_object_or_404(
        Event, pk=event_id, associated_ministry__owner_user=request.user
    )

    if not event.is_recurring:
        return JsonResponse(
            {"error": "This action is only available for recurring events"}, status=400
        )

    from datetime import datetime

    try:
        occurrence_date_obj = datetime.strptime(occurrence_date, "%Y-%m-%d").date()
    except ValueError:
        return JsonResponse({"error": "Invalid date format"}, status=400)

    if request.method == "POST":
        action = request.POST.get("action")

        if action == "cancel":
            exception, created = EventException.objects.get_or_create(
                event=event,
                original_occurrence_date=occurrence_date_obj,
                defaults={"status": "cancelled"},
            )
            if not created:
                exception.status = "cancelled"
                exception.new_start_datetime = None
                exception.new_end_datetime = None
                exception.save()

            return JsonResponse({"success": True, "action": "cancelled"})

        elif action == "reschedule":
            new_start = request.POST.get("new_start_datetime")
            new_end = request.POST.get("new_end_datetime")

            if not new_start or not new_end:
                return JsonResponse(
                    {"error": "New start and end times required"}, status=400
                )

            try:
                new_start_dt = datetime.fromisoformat(new_start.replace("Z", "+00:00"))
                new_end_dt = datetime.fromisoformat(new_end.replace("Z", "+00:00"))
            except ValueError:
                return JsonResponse({"error": "Invalid datetime format"}, status=400)

            exception, created = EventException.objects.get_or_create(
                event=event,
                original_occurrence_date=occurrence_date_obj,
                defaults={
                    "status": "rescheduled",
                    "new_start_datetime": new_start_dt,
                    "new_end_datetime": new_end_dt,
                },
            )
            if not created:
                exception.status = "rescheduled"
                exception.new_start_datetime = new_start_dt
                exception.new_end_datetime = new_end_dt
                exception.save()

            return JsonResponse({"success": True, "action": "rescheduled"})

        elif action == "restore":
            try:
                exception = EventException.objects.get(
                    event=event, original_occurrence_date=occurrence_date_obj
                )
                exception.delete()
                return JsonResponse({"success": True, "action": "restored"})
            except EventException.DoesNotExist:
                return JsonResponse(
                    {"error": "No exception found to restore"}, status=404
                )

    return JsonResponse({"error": "Invalid request"}, status=400)


def register_ministry_leader(request):
    if request.method == "POST":
        # Get the Prosopo token from the form
        prosopo_token = request.POST.get("procaptcha-response", "")

        # Create a modified POST data with the token for our captcha field
        post_data = request.POST.copy()
        post_data["captcha"] = prosopo_token

        form = MinistryLeaderRegistrationForm(post_data)
        if form.is_valid():
            user = form.save()

            # Send notification emails to all administrators
            admin_users = User.objects.filter(role="admin")
            for admin in admin_users:
                try:
                    context = {
                        "user": user,
                        "admin_url": request.build_absolute_uri("/admin/core/user/"),
                    }
                    subject = render_to_string(
                        "core/emails/admin_notification_subject.txt", context
                    ).strip()
                    message = render_to_string(
                        "core/emails/admin_notification_body.txt", context
                    )

                    send_mail(
                        subject=subject,
                        message=message,
                        from_email=settings.DEFAULT_FROM_EMAIL,
                        recipient_list=[admin.email],
                        fail_silently=True,
                    )
                except Exception:
                    # Log error in production, but don't fail the registration
                    pass

            return redirect("registration_success")
    else:
        form = MinistryLeaderRegistrationForm()

    return render(request, "core/register.html", {"form": form})


def registration_success(request):
    return render(request, "core/registration_success.html")


================================================================================
FILE: ./hogtown_project/__init__.py
================================================================================



================================================================================
FILE: ./hogtown_project/asgi.py
================================================================================

"""
ASGI config for hogtown_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "hogtown_project.settings")

application = get_asgi_application()


================================================================================
FILE: ./hogtown_project/settings.py
================================================================================

"""
Django settings for hogtown_project project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-default-key-change-in-production")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "yes", "on")

ALLOWED_HOSTS = (
    os.getenv("ALLOWED_HOSTS", "").split(",") if os.getenv("ALLOWED_HOSTS") else []
)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "anymail",
    "core",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "hogtown_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "hogtown_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE_URL = os.getenv("DATABASE_URL", f"sqlite:///{BASE_DIR}/db.sqlite3")

if DATABASE_URL.startswith("sqlite"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    # For other database backends, you would parse DATABASE_URL
    # This is a basic implementation - consider using dj-database-url for more robust parsing
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_TZ = True

# Custom user model
AUTH_USER_MODEL = "core.User"

# Custom authentication backend
AUTHENTICATION_BACKENDS = [
    "core.backends.ApprovedUserBackend",
]

# Login/logout URLs
LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/portal/"
LOGOUT_REDIRECT_URL = "/"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Prosopo Procaptcha settings
PROSOPO_SITE_KEY = os.getenv("PROSOPO_SITE_KEY", "your-site-key-here")
PROSOPO_SECRET_KEY = os.getenv("PROSOPO_SECRET_KEY", "your-secret-key-here")
PROSOPO_VERIFY_URL = os.getenv(
    "PROSOPO_VERIFY_URL", "https://api.prosopo.io/siteverify"
)

# Email settings
EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "noreply@hogtowncatholic.org")

# Brevo (Sendinblue) email settings
SENDINBLUE_API_KEY = os.getenv("SENDINBLUE_API_KEY")
if SENDINBLUE_API_KEY and EMAIL_BACKEND == "anymail.backends.sendinblue.EmailBackend":
    ANYMAIL = {
        "SENDINBLUE_API_KEY": SENDINBLUE_API_KEY,
    }


================================================================================
FILE: ./hogtown_project/urls.py
================================================================================

"""
URL configuration for hogtown_project project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", include("core.urls")),
]


================================================================================
FILE: ./hogtown_project/wsgi.py
================================================================================

"""
WSGI config for hogtown_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "hogtown_project.settings")

application = get_wsgi_application()


================================================================================
FILE: ./manage.py
================================================================================

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "hogtown_project.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


================================================================================
FILE: ./prd.txt
================================================================================

### Product Specification: Hogtown Catholic

This document specifies the requirements for a web application named "Hogtown Catholic." The application will serve as a centralized directory for Catholic parishes, ministries, and events within Gainesville, Florida.

---

### 1. System Overview

The system is a database-driven web application with three primary components:
1.  **A public-facing website:** Allows anonymous users to browse content. A visible link allows potential ministry leaders to register.
2.  **A Ministry Leader portal:** A secure area where authenticated and approved users can manage their ministry profiles and post events.
3.  **An Administrator backend:** A secure area for administrators to manage core data and user approvals. The system supports multiple administrators and ensures that new user requests are actioned on a first-come, first-served basis.

### 2. User Roles & Permissions

* **Anonymous User (Public):**
    * **Can:** View all public pages including directories and the event calendar.
    * **Can:** Click the registration link to apply to become a Ministry Leader.
    * **Cannot:** Create, edit, or delete any content.

* **Ministry Leader (Authenticated User):**
    * **Can:** Log in and out *after their account has been approved by an administrator*.
    * **Can:** Create, read, update, and delete ministry profiles and event series that they own.
    * **Cannot:** Modify content belonging to other Ministry Leaders or modify core site data (parishes, categories).

* **Administrator (Super User):**
    * **Can:** Perform all actions of a Ministry Leader.
    * **Can:** Manage all core data (Parishes, Categories).
    * **Can:** Receive email notifications for new registration requests.
    * **Can:** Approve or deny any pending registration requests.

### 3. Data Models

* **Parish**
    * `parish_id`: (Primary Key) Unique identifier.
    * `name`: (Text) e.g., "Queen of Peace Catholic Church"
    * `address`: (Text)
    * `website_url`: (URL)
    * `phone_number`: (Text)
    * `mass_schedule`: (Text Block)

* **User** (Represents Ministry Leaders & Admins)
    * `user_id`: (Primary Key) Unique identifier.
    * `email`: (Email) Unique, used for login.
    * `password_hash`: (Text) Hashed and salted password.
    * `full_name`: (Text)
    * `associated_parish_id`: (Foreign Key to `Parish`)
    * `requested_ministry_details`: (Text) A user-provided description of the ministry they own or wish to create, captured during registration.
    * `role`: (Enum) 'leader' or 'admin'.
    * `status`: (Enum) 'pending', 'approved', 'rejected'.

* **Category** (Represents Ministry Types/Tags)
    * `category_id`: (Primary Key) Unique identifier.
    * `name`: (Text) e.g., "Service & Outreach".

* **Ministry**
    * `ministry_id`: (Primary Key) Unique identifier.
    * `owner_user_id`: (Foreign Key to `User`)
    * `associated_parish_id`: (Foreign Key to `Parish`)
    * `name`: (Text)
    * `description`: (Text Block)
    * `contact_info`: (Text)
    * `categories`: (Many-to-Many relationship with `Category`).

* **Event** (Represents a single ad-hoc or recurring event series)
    * `event_id`: (Primary Key) Unique identifier.
    * `associated_ministry_id`: (Foreign Key to `Ministry`)
    * `title`: (Text)
    * `description`: (Text Block)
    * `location`: (Text)
    * `is_recurring`: (Boolean)
    * `start_datetime`: (Timestamp) For ad-hoc events.
    * `end_datetime`: (Timestamp) For ad-hoc events.
    * `series_start_date`: (Date) For recurring events.
    * `series_end_date`: (Date) For recurring events.
    * `start_time_of_day`: (Time) For recurring events.
    * `end_time_of_day`: (Time) For recurring events.
    * `recurrence_rule`: (Text) RFC 5545 RRULE string.

* **EventException** (Represents a modification to a recurring series instance)
    * `exception_id`: (Primary Key) Unique identifier.
    * `event_id`: (Foreign Key to `Event`)
    * `original_occurrence_date`: (Date)
    * `status`: (Enum) 'cancelled', 'rescheduled'.
    * `new_start_datetime`: (Timestamp)
    * `new_end_datetime`: (Timestamp)

### 4. Application Functionality

#### 4.1. Public Website
* **Site Navigation:** The main navigation bar or footer must contain a clearly visible link with the text "Register as a Ministry Leader." This link is visible to all non-logged-in users.
* **Event Calendar and Directories:** Functionality is unchanged.

#### 4.2. Ministry Leader Registration Workflow
* **Step 1: Initiation**
    * An anonymous user clicks the "Register as a Ministry Leader" link.
* **Step 2: Data Entry Form**
    * The system presents a registration form with the following fields:
        * `full_name`: (Text, required)
        * `email`: (Text, required, must be a valid email format)
        * `password`: (Password, required, with a second field for confirmation)
        * `associated_parish_id`: (Dropdown populated from `Parish` table, required)
        * `requested_ministry_details`: (Text Area, required, label: "Tell us about your ministry")
        * `CAPTCHA`: (Required, must be validated server-side on submission).
* **Step 3: Submission Processing & Notification**
    * On submission, the system validates all fields and the CAPTCHA.
    * If valid, it creates a new `User` record with the provided details, `role: 'leader'`, and `status: 'pending'`.
    * The system then queries the `User` table for all users where `role = 'admin'`. It iterates through this list and sends an automated notification email to each administrator's email address. The email content must include the applicant's `full_name`, `email`, `associated_parish_name`, `requested_ministry_details`, and a direct link to the admin approval dashboard.
* **Step 4: User Confirmation**
    * The user is redirected to a confirmation page with the message: "Thank you for your submission. Your request is pending review. You will receive an email notification once a decision has been made."

#### 4.3. Administrator Functionality
* **View: User Approval Dashboard**
    * An admin-only page that displays a table of all `User` objects where `status` is 'pending'. This view should be dynamically updated or require a refresh to reflect actions taken by other administrators.
    * Each row must display the user's details (name, email, parish, requested ministry) and have two action buttons: "Approve" and "Reject".
* **Workflow: Approval/Rejection**
    * **Action Guard:** When any administrator clicks "Approve" or "Reject", the backend must first perform a check on the database to confirm the target user's `status` is still 'pending'. If it has already been changed (e.g., by another administrator), the action must fail, and the UI should inform the current admin that the request has already been processed.
    * **On "Approve" click (if status is 'pending'):**
        1.  The system updates the target `User` record's `status` to 'approved'.
        2.  The system triggers an email to the applicant's `email` address with the subject "Your Hogtown Catholic Account is Approved" and a body message informing them they can now log in.
    * **On "Reject" click (if status is 'pending'):**
        1.  The system updates the target `User` record's `status` to 'rejected'.
        2.  The system triggers an email to the applicant's `email` address with the subject "Hogtown Catholic Account Update" and a body message informing them their application was not approved.

#### 4.4. Ministry Leader Portal (Post-Approval)
* **Login and CRUD operations:** Functionality is unchanged. An approved user can log in and manage their owned ministries and events.

### 5. Non-Functional Requirements
* **Responsiveness:** The entire application must be fully responsive.
* **Security:** All user passwords must be hashed. All forms must be protected against CSRF and XSS attacks. The registration endpoint must be rate-limited.
* **Date/Time Handling:** The system must consistently handle timezones, assuming all user inputs are relative to the local timezone (America/New_York) and storing them in a standardized format (UTC).
* **Email Delivery:** The system must integrate with a reliable transactional email service to ensure delivery of notification emails.


================================================================================
FILE: ./pytest.ini
================================================================================

[tool:pytest]
DJANGO_SETTINGS_MODULE = hogtown_project.settings
python_files = tests.py test_*.py *_tests.py
addopts = --tb=short --strict-markers
testpaths = core
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow running tests

================================================================================
FILE: ./requirements-dev.txt
================================================================================

# Development and testing dependencies
coverage==7.3.2
flake8==6.1.0
black==23.12.1
isort==5.12.0
bandit==1.7.5
safety==3.0.1
pytest==7.4.3
pytest-django==4.7.0

================================================================================
FILE: ./requirements.txt
================================================================================

asgiref==3.8.1
Django==5.2.2
sqlparse==0.5.3
python-dateutil==2.8.2
django-anymail==10.2
python-dotenv==1.0.0
gunicorn==21.2.0
psycopg2-binary==2.9.9
boto3==1.34.47


================================================================================
FILE: ./setup.cfg
================================================================================

[flake8]
max-line-length = 127
exclude = 
    .git,
    __pycache__,
    venv,
    migrations,
    .venv,
    .tox,
    .eggs,
    *.egg,
    build,
    dist
ignore = 
    E203,
    W503
per-file-ignores =
    __init__.py:F401
    settings.py:E501

[isort]
profile = black
multi_line_output = 3
line_length = 127
known_django = django
known_first_party = core,hogtown_project
sections = FUTURE,STDLIB,THIRDPARTY,DJANGO,FIRSTPARTY,LOCALFOLDER

[coverage:run]
source = .
omit = 
    */venv/*
    */migrations/*
    manage.py
    hogtown_project/wsgi.py
    hogtown_project/asgi.py
    */settings/*
    */test_*
    */tests/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError

================================================================================
FILE: ./terraform/config/backend.yaml
================================================================================

region: us-east-1
buckets:
  shared: hogtown-terraform-state-shared
  staging: hogtown-terraform-state-staging
  prod: hogtown-terraform-state-prod

================================================================================
FILE: ./terraform/environments/prod/backend.tf
================================================================================

# Backend configuration for production environment
# Use: terraform init -backend-config=../../../config/prod.tfbackend

terraform {
  backend "s3" {}
}

================================================================================
FILE: ./terraform/environments/prod/main.tf
================================================================================

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# Backend configuration - sourced from centralized config
locals {
  backend_config = yamldecode(file("../../config/backend.yaml"))
  backend_bucket = local.backend_config.buckets.shared
  backend_region = local.backend_config.region
}

# Get shared infrastructure information
data "terraform_remote_state" "shared" {
  backend = "s3"
  config = {
    bucket = local.backend_bucket
    key    = "terraform.tfstate"
    region = local.backend_region
  }
}

# Database setup for production environment
module "database_setup" {
  source = "../../modules/database-setup"
  
  project_name           = var.project_name
  rds_secrets_manager_arn = data.terraform_remote_state.shared.outputs.secrets_manager_arn
  environment_databases  = ["${var.project_name}_prod"]
}

# Production App Runner service
module "prod_apprunner" {
  source = "../../modules/apprunner"
  
  app_name                    = "${var.project_name}-prod"
  project_name               = var.project_name
  environment                = "prod"
  vpc_id                     = var.vpc_id
  enable_vpc_connector       = var.enable_vpc_connector
  database_security_groups   = [data.terraform_remote_state.shared.outputs.database_security_group_id]
  github_repository_url      = var.github_repository_url
  github_branch              = var.prod_branch
  github_connection_arn      = data.terraform_remote_state.shared.outputs.github_connection_arn
  auto_deploy_enabled        = var.auto_deploy_enabled
  cpu                        = var.prod_cpu
  memory                     = var.prod_memory
  secrets_manager_arns       = [for arn in module.database_setup.environment_database_secrets : arn]
  database_secret_arn        = module.database_setup.environment_database_secrets["${var.project_name}_prod"]
  gunicorn_workers           = 2  # 2 workers for 0.5 vCPU
  observability_enabled      = var.observability_enabled
  log_retention_days         = var.log_retention_days
  
  # Health check configuration
  health_check_path          = var.health_check_path
  health_check_healthy_threshold   = var.health_check_healthy_threshold
  health_check_unhealthy_threshold = var.health_check_unhealthy_threshold
  health_check_interval      = var.health_check_interval
  health_check_timeout       = var.health_check_timeout
}

================================================================================
FILE: ./terraform/environments/prod/outputs.tf
================================================================================

output "prod_app_url" {
  description = "The URL of the production App Runner service"
  value       = module.prod_apprunner.app_runner_service_url
}

output "prod_app_arn" {
  description = "The ARN of the production App Runner service"
  value       = module.prod_apprunner.app_runner_service_arn
}

output "prod_app_status" {
  description = "The status of the production App Runner service"
  value       = module.prod_apprunner.app_runner_service_status
}

output "prod_database_secrets" {
  description = "Secrets Manager ARNs for production database credentials"
  value       = module.database_setup.environment_database_secrets
  sensitive   = true
}

output "prod_log_group" {
  description = "CloudWatch log group for production App Runner service"
  value       = module.prod_apprunner.log_group_name
}

================================================================================
FILE: ./terraform/environments/prod/variables.tf
================================================================================

variable "project_name" {
  description = "Name of the project"
  type        = string
  default     = "hogtown"
}

variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}

variable "vpc_id" {
  description = "VPC ID to deploy App Runner VPC connector in (leave empty for default VPC)"
  type        = string
  default     = ""
}

variable "enable_vpc_connector" {
  description = "Enable VPC connector for private network access to RDS"
  type        = bool
  default     = true
}

variable "github_repository_url" {
  description = "GitHub repository URL (e.g., https://github.com/username/repo)"
  type        = string
  
  validation {
    condition     = can(regex("^https://github\\.com/[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+/?$", var.github_repository_url))
    error_message = "The github_repository_url must be a valid GitHub repository URL in the format: https://github.com/username/repository"
  }
}

variable "prod_branch" {
  description = "GitHub branch for production deployment"
  type        = string
  default     = "main"
}

variable "auto_deploy_enabled" {
  description = "Enable automatic deployments on code changes (recommended: false for production)"
  type        = bool
  default     = false
}

variable "prod_cpu" {
  description = "CPU units for production App Runner service"
  type        = string
  default     = "0.5 vCPU"
}

variable "prod_memory" {
  description = "Memory for production App Runner service"
  type        = string
  default     = "1 GB"
}

variable "observability_enabled" {
  description = "Enable observability (X-Ray tracing)"
  type        = bool
  default     = true
}

variable "log_retention_days" {
  description = "CloudWatch log retention period in days"
  type        = number
  default     = 30
}

variable "health_check_path" {
  description = "Health check path"
  type        = string
  default     = "/"
}

variable "health_check_healthy_threshold" {
  description = "Number of consecutive successful health checks"
  type        = number
  default     = 2
}

variable "health_check_unhealthy_threshold" {
  description = "Number of consecutive failed health checks"
  type        = number
  default     = 5
}

variable "health_check_interval" {
  description = "Health check interval in seconds"
  type        = number
  default     = 10
}

variable "health_check_timeout" {
  description = "Health check timeout in seconds"
  type        = number
  default     = 5
}

================================================================================
FILE: ./terraform/environments/staging/backend.tf
================================================================================

# Backend configuration for staging environment
# Use: terraform init -backend-config=../../../config/staging.tfbackend

terraform {
  backend "s3" {}
}

================================================================================
FILE: ./terraform/environments/staging/main.tf
================================================================================

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# Backend configuration - sourced from centralized config
locals {
  backend_config = yamldecode(file("../../config/backend.yaml"))
  backend_bucket = local.backend_config.buckets.shared
  backend_region = local.backend_config.region
}

# Get shared infrastructure information
data "terraform_remote_state" "shared" {
  backend = "s3"
  config = {
    bucket = local.backend_bucket
    key    = "terraform.tfstate"
    region = local.backend_region
  }
}

# Database setup for staging environment
module "database_setup" {
  source = "../../modules/database-setup"
  
  project_name           = var.project_name
  rds_secrets_manager_arn = data.terraform_remote_state.shared.outputs.secrets_manager_arn
  environment_databases  = ["${var.project_name}_staging"]
}

# Staging App Runner service
module "staging_apprunner" {
  source = "../../modules/apprunner"
  
  app_name                    = "${var.project_name}-staging"
  project_name               = var.project_name
  environment                = "staging"
  vpc_id                     = var.vpc_id
  enable_vpc_connector       = var.enable_vpc_connector
  database_security_groups   = [data.terraform_remote_state.shared.outputs.database_security_group_id]
  github_repository_url      = var.github_repository_url
  github_branch              = var.staging_branch
  github_connection_arn      = data.terraform_remote_state.shared.outputs.github_connection_arn
  auto_deploy_enabled        = var.auto_deploy_enabled
  cpu                        = var.staging_cpu
  memory                     = var.staging_memory
  secrets_manager_arns       = [for arn in module.database_setup.environment_database_secrets : arn]
  database_secret_arn        = module.database_setup.environment_database_secrets["${var.project_name}_staging"]
  gunicorn_workers           = 1  # 1 worker for 0.25 vCPU
  observability_enabled      = var.observability_enabled
  log_retention_days         = var.log_retention_days
  
  # Health check configuration
  health_check_path          = var.health_check_path
  health_check_healthy_threshold   = var.health_check_healthy_threshold
  health_check_unhealthy_threshold = var.health_check_unhealthy_threshold
  health_check_interval      = var.health_check_interval
  health_check_timeout       = var.health_check_timeout
}

================================================================================
FILE: ./terraform/environments/staging/outputs.tf
================================================================================

output "staging_app_url" {
  description = "The URL of the staging App Runner service"
  value       = module.staging_apprunner.app_runner_service_url
}

output "staging_app_arn" {
  description = "The ARN of the staging App Runner service"
  value       = module.staging_apprunner.app_runner_service_arn
}

output "staging_app_status" {
  description = "The status of the staging App Runner service"
  value       = module.staging_apprunner.app_runner_service_status
}

output "staging_database_secrets" {
  description = "Secrets Manager ARNs for staging database credentials"
  value       = module.database_setup.environment_database_secrets
  sensitive   = true
}

output "staging_log_group" {
  description = "CloudWatch log group for staging App Runner service"
  value       = module.staging_apprunner.log_group_name
}

================================================================================
FILE: ./terraform/environments/staging/variables.tf
================================================================================

variable "project_name" {
  description = "Name of the project"
  type        = string
  default     = "hogtown"
}

variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}

variable "vpc_id" {
  description = "VPC ID to deploy App Runner VPC connector in (leave empty for default VPC)"
  type        = string
  default     = ""
}

variable "enable_vpc_connector" {
  description = "Enable VPC connector for private network access to RDS"
  type        = bool
  default     = true
}

variable "github_repository_url" {
  description = "GitHub repository URL (e.g., https://github.com/username/repo)"
  type        = string
  
  validation {
    condition     = can(regex("^https://github\\.com/[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+/?$", var.github_repository_url))
    error_message = "The github_repository_url must be a valid GitHub repository URL in the format: https://github.com/username/repository"
  }
}

variable "staging_branch" {
  description = "GitHub branch for staging deployment"
  type        = string
  default     = "develop"
}

variable "auto_deploy_enabled" {
  description = "Enable automatic deployments on code changes"
  type        = bool
  default     = true
}

variable "staging_cpu" {
  description = "CPU units for staging App Runner service"
  type        = string
  default     = "0.25 vCPU"
}

variable "staging_memory" {
  description = "Memory for staging App Runner service"
  type        = string
  default     = "0.5 GB"
}

variable "observability_enabled" {
  description = "Enable observability (X-Ray tracing)"
  type        = bool
  default     = false
}

variable "log_retention_days" {
  description = "CloudWatch log retention period in days"
  type        = number
  default     = 7
}

variable "health_check_path" {
  description = "Health check path"
  type        = string
  default     = "/"
}

variable "health_check_healthy_threshold" {
  description = "Number of consecutive successful health checks"
  type        = number
  default     = 1
}

variable "health_check_unhealthy_threshold" {
  description = "Number of consecutive failed health checks"
  type        = number
  default     = 3
}

variable "health_check_interval" {
  description = "Health check interval in seconds"
  type        = number
  default     = 10
}

variable "health_check_timeout" {
  description = "Health check timeout in seconds"
  type        = number
  default     = 5
}

================================================================================
FILE: ./terraform/modules/apprunner/main.tf
================================================================================

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Get current AWS region
data "aws_region" "current" {}

# Get VPC information for App Runner VPC connector
data "aws_vpc" "selected" {
  id      = var.vpc_id != "" ? var.vpc_id : null
  default = var.vpc_id == "" ? true : false
}

data "aws_subnets" "private" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.selected.id]
  }
  
  # Prefer private subnets for security
  filter {
    name   = "tag:Name"
    values = ["*private*"]
  }
}

# Fall back to all subnets if no private subnets found
data "aws_subnets" "fallback" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.selected.id]
  }
}

locals {
  subnet_ids = length(data.aws_subnets.private.ids) > 0 ? data.aws_subnets.private.ids : data.aws_subnets.fallback.ids
}

# Security group for App Runner VPC connector
resource "aws_security_group" "apprunner_vpc_connector" {
  count       = var.enable_vpc_connector ? 1 : 0
  name        = "${var.app_name}-apprunner-vpc-sg"
  description = "Security group for App Runner VPC connector"
  vpc_id      = data.aws_vpc.selected.id

  # Outbound access to RDS
  egress {
    from_port       = 5432
    to_port         = 5432
    protocol        = "tcp"
    security_groups = var.database_security_groups
  }

  # Outbound HTTPS for external APIs
  egress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Outbound HTTP for external APIs (if needed)
  egress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name        = "${var.app_name}-apprunner-vpc-sg"
    Environment = var.environment
    Project     = var.project_name
  }
}

# VPC connector for App Runner to access RDS in VPC
resource "aws_apprunner_vpc_connector" "main" {
  count              = var.enable_vpc_connector ? 1 : 0
  vpc_connector_name = "${var.app_name}-vpc-connector"
  subnets            = local.subnet_ids
  security_groups    = [aws_security_group.apprunner_vpc_connector[0].id]

  tags = {
    Name        = "${var.app_name}-vpc-connector"
    Environment = var.environment
    Project     = var.project_name
  }
}

# IAM role for App Runner service with minimal permissions
resource "aws_iam_role" "apprunner_service_role" {
  name = "${var.app_name}-apprunner-service-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "tasks.apprunner.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Name        = "${var.app_name}-service-role"
    Environment = var.environment
    Project     = var.project_name
  }
}

# Policy for accessing Secrets Manager
resource "aws_iam_policy" "secrets_access" {
  count       = length(var.secrets_manager_arns) > 0 ? 1 : 0
  name        = "${var.app_name}-secrets-access"
  description = "Allow App Runner to access required secrets"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "secretsmanager:GetSecretValue",
          "secretsmanager:DescribeSecret"
        ]
        Resource = var.secrets_manager_arns
      }
    ]
  })

  tags = {
    Name        = "${var.app_name}-secrets-policy"
    Environment = var.environment
    Project     = var.project_name
  }
}

resource "aws_iam_role_policy_attachment" "secrets_access" {
  count      = length(var.secrets_manager_arns) > 0 ? 1 : 0
  role       = aws_iam_role.apprunner_service_role.name
  policy_arn = aws_iam_policy.secrets_access[0].arn
}

# IAM role for App Runner build (accessing ECR, etc.)
resource "aws_iam_role" "apprunner_build_role" {
  name = "${var.app_name}-apprunner-build-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "build.apprunner.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Name        = "${var.app_name}-build-role"
    Environment = var.environment
    Project     = var.project_name
  }
}

resource "aws_iam_role_policy_attachment" "apprunner_build_role_policy" {
  role       = aws_iam_role.apprunner_build_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess"
}

# App Runner service with improved configuration
resource "aws_apprunner_service" "main" {
  service_name = var.app_name

  source_configuration {
    auto_deployments_enabled = var.auto_deploy_enabled
    
    code_repository {
      repository_url = var.github_repository_url
      
      code_configuration {
        configuration_source = "REPOSITORY"  # Use apprunner.yaml from repo
        
        code_configuration_values {
          runtime_environment_variables = merge({
            DJANGO_SETTINGS_MODULE = "hogtown_project.settings"
            DEBUG                  = "False"
            AWS_REGION            = data.aws_region.current.name
            GUNICORN_WORKERS      = tostring(var.gunicorn_workers)
          }, var.additional_env_vars)
          
          runtime_environment_secrets = var.database_secret_arn != "" ? {
            DATABASE_URL = "${var.database_secret_arn}:database_url"
          } : {}
        }
      }
      
      source_code_version {
        type  = "BRANCH"
        value = var.github_branch
      }
    }
    
    connection_arn = var.github_connection_arn
  }

  instance_configuration {
    cpu               = var.cpu
    memory            = var.memory
    instance_role_arn = aws_iam_role.apprunner_service_role.arn
  }

  # VPC configuration for database access
  dynamic "network_configuration" {
    for_each = var.enable_vpc_connector ? [1] : []
    content {
      egress_configuration {
        egress_type       = "VPC"
        vpc_connector_arn = aws_apprunner_vpc_connector.main[0].arn
      }
    }
  }

  health_check_configuration {
    healthy_threshold   = var.health_check_healthy_threshold
    interval            = var.health_check_interval
    path                = var.health_check_path
    protocol            = var.health_check_protocol
    timeout             = var.health_check_timeout
    unhealthy_threshold = var.health_check_unhealthy_threshold
  }

  # Observability configuration
  observability_configuration {
    observability_enabled   = var.observability_enabled
    observability_configuration_arn = var.observability_configuration_arn
  }

  tags = {
    Name        = var.app_name
    Environment = var.environment
    Project     = var.project_name
  }
}

# CloudWatch Log Group for App Runner logs
resource "aws_cloudwatch_log_group" "apprunner" {
  name              = "/aws/apprunner/${var.app_name}/application"
  retention_in_days = var.log_retention_days

  tags = {
    Name        = "${var.app_name}-logs"
    Environment = var.environment
    Project     = var.project_name
  }
}

================================================================================
FILE: ./terraform/modules/apprunner/outputs.tf
================================================================================

output "app_runner_service_url" {
  description = "The URL of the App Runner service"
  value       = "https://${aws_apprunner_service.main.service_url}"
}

output "app_runner_service_arn" {
  description = "The ARN of the App Runner service"
  value       = aws_apprunner_service.main.arn
}

output "app_runner_service_id" {
  description = "The ID of the App Runner service"
  value       = aws_apprunner_service.main.service_id
}

output "app_runner_service_status" {
  description = "The status of the App Runner service"
  value       = aws_apprunner_service.main.status
}

output "vpc_connector_arn" {
  description = "The ARN of the VPC connector (if enabled)"
  value       = var.enable_vpc_connector ? aws_apprunner_vpc_connector.main[0].arn : null
}

output "security_group_id" {
  description = "The security group ID for the VPC connector (if enabled)"
  value       = var.enable_vpc_connector ? aws_security_group.apprunner_vpc_connector[0].id : null
}

output "log_group_name" {
  description = "The CloudWatch log group name"
  value       = aws_cloudwatch_log_group.apprunner.name
}

================================================================================
FILE: ./terraform/modules/apprunner/variables.tf
================================================================================

variable "app_name" {
  description = "Name of the application"
  type        = string
}

variable "project_name" {
  description = "Name of the project"
  type        = string
}

variable "environment" {
  description = "Environment name (e.g., dev, staging, prod)"
  type        = string
}

variable "vpc_id" {
  description = "VPC ID to deploy App Runner VPC connector in (leave empty for default VPC)"
  type        = string
  default     = ""
}

variable "enable_vpc_connector" {
  description = "Enable VPC connector for private network access"
  type        = bool
  default     = true
}

variable "database_security_groups" {
  description = "Security groups that App Runner should be able to access (e.g., RDS security group)"
  type        = list(string)
  default     = []
}

variable "github_repository_url" {
  description = "GitHub repository URL"
  type        = string
}

variable "github_branch" {
  description = "GitHub branch to deploy from"
  type        = string
  default     = "main"
}

variable "github_connection_arn" {
  description = "GitHub connection ARN"
  type        = string
}

variable "auto_deploy_enabled" {
  description = "Enable automatic deployments on code changes"
  type        = bool
  default     = true
}

variable "cpu" {
  description = "CPU units for the App Runner service"
  type        = string
  default     = "0.25 vCPU"
  
  validation {
    condition = contains([
      "0.25 vCPU",
      "0.5 vCPU", 
      "1 vCPU",
      "2 vCPU",
      "4 vCPU"
    ], var.cpu)
    error_message = "CPU must be one of: 0.25 vCPU, 0.5 vCPU, 1 vCPU, 2 vCPU, 4 vCPU."
  }
}

variable "memory" {
  description = "Memory for the App Runner service"
  type        = string
  default     = "0.5 GB"
  
  validation {
    condition = contains([
      "0.5 GB",
      "1 GB",
      "2 GB", 
      "3 GB",
      "4 GB",
      "6 GB",
      "8 GB",
      "10 GB",
      "12 GB"
    ], var.memory)
    error_message = "Memory must be one of: 0.5 GB, 1 GB, 2 GB, 3 GB, 4 GB, 6 GB, 8 GB, 10 GB, 12 GB."
  }
}

variable "secrets_manager_arns" {
  description = "List of Secrets Manager ARNs that the service needs access to"
  type        = list(string)
  default     = []
}

variable "database_secret_arn" {
  description = "ARN of the database secret in Secrets Manager"
  type        = string
  default     = ""
}

variable "gunicorn_workers" {
  description = "Number of Gunicorn workers (should match CPU allocation)"
  type        = number
  default     = 1
  
  validation {
    condition = var.gunicorn_workers >= 1 && var.gunicorn_workers <= 4
    error_message = "Gunicorn workers must be between 1 and 4."
  }
}

variable "additional_env_vars" {
  description = "Additional environment variables to set for the App Runner service"
  type        = map(string)
  default     = {}
}

# Health check configuration
variable "health_check_healthy_threshold" {
  description = "Number of consecutive successful health checks"
  type        = number
  default     = 1
}

variable "health_check_interval" {
  description = "Health check interval in seconds"
  type        = number
  default     = 10
}

variable "health_check_path" {
  description = "Health check path"
  type        = string
  default     = "/"
}

variable "health_check_protocol" {
  description = "Health check protocol"
  type        = string
  default     = "HTTP"
}

variable "health_check_timeout" {
  description = "Health check timeout in seconds"
  type        = number
  default     = 5
}

variable "health_check_unhealthy_threshold" {
  description = "Number of consecutive failed health checks"
  type        = number
  default     = 5
}

# Observability configuration
variable "observability_enabled" {
  description = "Enable observability (X-Ray tracing)"
  type        = bool
  default     = false
}

variable "observability_configuration_arn" {
  description = "ARN of observability configuration"
  type        = string
  default     = ""
}

variable "log_retention_days" {
  description = "CloudWatch log retention period in days"
  type        = number
  default     = 14
}

================================================================================
FILE: ./terraform/modules/database-setup/main.tf
================================================================================

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.1"
    }
    postgresql = {
      source  = "cyrilgdn/postgresql"
      version = "~> 1.0"
    }
  }
}

# Get RDS credentials from Secrets Manager
data "aws_secretsmanager_secret_version" "rds_master" {
  secret_id = var.rds_secrets_manager_arn
}

locals {
  rds_creds = jsondecode(data.aws_secretsmanager_secret_version.rds_master.secret_string)
}

# PostgreSQL provider for creating databases and users
provider "postgresql" {
  host     = local.rds_creds.endpoint
  port     = local.rds_creds.port
  database = local.rds_creds.dbname
  username = local.rds_creds.username
  password = local.rds_creds.password
  sslmode  = "require"
}

# Create environment-specific databases
resource "postgresql_database" "env_databases" {
  for_each = toset(var.environment_databases)
  name     = each.value
  
  depends_on = [
    data.aws_secretsmanager_secret_version.rds_master
  ]
}

# Create environment-specific users with strong passwords
resource "random_password" "env_passwords" {
  for_each = toset(var.environment_databases)
  length   = 32
  special  = true
}

resource "postgresql_role" "env_users" {
  for_each = toset(var.environment_databases)
  name     = "${each.value}_user"
  login    = true
  password = random_password.env_passwords[each.key].result
  
  depends_on = [
    postgresql_database.env_databases
  ]
}

# Grant comprehensive privileges to environment users
resource "postgresql_grant" "env_user_database_privileges" {
  for_each    = toset(var.environment_databases)
  database    = postgresql_database.env_databases[each.key].name
  role        = postgresql_role.env_users[each.key].name
  object_type = "database"
  privileges  = ["CONNECT", "CREATE", "TEMPORARY"]
}

# Grant schema privileges
resource "postgresql_grant" "env_user_schema_privileges" {
  for_each    = toset(var.environment_databases)
  database    = postgresql_database.env_databases[each.key].name
  role        = postgresql_role.env_users[each.key].name
  schema      = "public"
  object_type = "schema"
  privileges  = ["CREATE", "USAGE"]
}

# Store environment database credentials in Secrets Manager
resource "aws_secretsmanager_secret" "env_db_secrets" {
  for_each    = toset(var.environment_databases)
  name        = "${var.project_name}/database/${each.value}"
  description = "Database credentials for ${each.value} environment"
  
  tags = {
    Name        = "${var.project_name}-${each.value}-db"
    Environment = each.value
    Project     = var.project_name
  }
}

resource "aws_secretsmanager_secret_version" "env_db_secrets" {
  for_each  = toset(var.environment_databases)
  secret_id = aws_secretsmanager_secret.env_db_secrets[each.key].id
  secret_string = jsonencode({
    username = postgresql_role.env_users[each.key].name
    password = random_password.env_passwords[each.key].result
    endpoint = local.rds_creds.endpoint
    port     = local.rds_creds.port
    dbname   = postgresql_database.env_databases[each.key].name
    database_url = "postgresql://${postgresql_role.env_users[each.key].name}:${random_password.env_passwords[each.key].result}@${local.rds_creds.endpoint}:${local.rds_creds.port}/${postgresql_database.env_databases[each.key].name}"
  })
}

================================================================================
FILE: ./terraform/modules/database-setup/outputs.tf
================================================================================

output "environment_database_secrets" {
  description = "Map of Secrets Manager ARNs for each environment database"
  value = {
    for env in var.environment_databases : env => aws_secretsmanager_secret.env_db_secrets[env].arn
  }
}

output "database_urls" {
  description = "Complete database URLs for each environment"
  value = {
    for env in var.environment_databases : env => 
      "postgresql://${postgresql_role.env_users[env].name}:${random_password.env_passwords[env].result}@${local.rds_creds.endpoint}:${local.rds_creds.port}/${postgresql_database.env_databases[env].name}"
  }
  sensitive = true
}

================================================================================
FILE: ./terraform/modules/database-setup/variables.tf
================================================================================

variable "project_name" {
  description = "Name of the project"
  type        = string
}

variable "rds_secrets_manager_arn" {
  description = "ARN of the Secrets Manager secret containing RDS master credentials"
  type        = string
}

variable "environment_databases" {
  description = "List of environment-specific databases to create"
  type        = list(string)
  default     = []
}

================================================================================
FILE: ./terraform/modules/database/main.tf
================================================================================

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.1"
    }
  }
}

# Get default VPC or use provided VPC
data "aws_vpc" "selected" {
  id      = var.vpc_id != "" ? var.vpc_id : null
  default = var.vpc_id == "" ? true : false
}

# Get subnets for RDS
data "aws_subnets" "database" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.selected.id]
  }
  
  # Only filter by availability zones if specific zones are provided
  dynamic "filter" {
    for_each = length(var.availability_zones) > 0 ? [1] : []
    content {
      name   = "availability-zone"
      values = var.availability_zones
    }
  }
}

# Security group for RDS - restrictive access
resource "aws_security_group" "rds" {
  name        = "${var.project_name}-rds-sg"
  description = "Security group for RDS PostgreSQL instance"
  vpc_id      = data.aws_vpc.selected.id

  # Allow access from security groups
  dynamic "ingress" {
    for_each = length(var.allowed_security_groups) > 0 ? [1] : []
    content {
      from_port       = 5432
      to_port         = 5432
      protocol        = "tcp"
      security_groups = var.allowed_security_groups
    }
  }
  
  # Allow access from CIDR blocks (use sparingly)
  dynamic "ingress" {
    for_each = length(var.allowed_cidr_blocks) > 0 ? [1] : []
    content {
      from_port   = 5432
      to_port     = 5432
      protocol    = "tcp"
      cidr_blocks = var.allowed_cidr_blocks
    }
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name    = "${var.project_name}-rds-sg"
    Project = var.project_name
  }
}

# RDS subnet group
resource "aws_db_subnet_group" "default" {
  name       = "${var.project_name}-subnet-group"
  subnet_ids = data.aws_subnets.database.ids

  tags = {
    Name    = "${var.project_name}-subnet-group"
    Project = var.project_name
  }
}

# Random password for master database user
resource "random_password" "master_password" {
  length  = 32
  special = true
}

# RDS PostgreSQL instance with production-ready configuration
resource "aws_db_instance" "postgres" {
  identifier = "${var.project_name}-postgres"

  engine         = "postgres"
  engine_version = var.postgres_version
  instance_class = var.db_instance_class

  allocated_storage     = var.db_allocated_storage
  max_allocated_storage = var.db_max_allocated_storage
  storage_type          = "gp3"
  storage_encrypted     = true
  kms_key_id           = var.kms_key_id != "" ? var.kms_key_id : null

  # Production settings
  multi_az               = var.multi_az
  publicly_accessible    = false
  backup_retention_period = var.backup_retention_period
  backup_window          = var.backup_window
  maintenance_window     = var.maintenance_window
  
  # Monitoring
  monitoring_interval = var.monitoring_interval
  monitoring_role_arn = var.monitoring_interval > 0 ? aws_iam_role.rds_enhanced_monitoring[0].arn : null
  
  performance_insights_enabled = var.performance_insights_enabled
  enabled_cloudwatch_logs_exports = ["postgresql", "upgrade"]

  db_name  = var.master_db_name
  username = var.master_username
  password = random_password.master_password.result

  vpc_security_group_ids = [aws_security_group.rds.id]
  db_subnet_group_name   = aws_db_subnet_group.default.name
  
  # Parameter group for optimization
  parameter_group_name = aws_db_parameter_group.postgres.name

  skip_final_snapshot = var.skip_final_snapshot
  deletion_protection = var.deletion_protection

  tags = {
    Name        = "${var.project_name}-postgres"
    Project     = var.project_name
    Environment = "shared"
  }
}

# Parameter group for PostgreSQL optimization
resource "aws_db_parameter_group" "postgres" {
  family = "postgres${split(".", var.postgres_version)[0]}"
  name   = "${var.project_name}-postgres-params"

  parameter {
    name  = "log_statement"
    value = "all"
  }

  parameter {
    name  = "log_min_duration_statement"
    value = "1000"
  }

  tags = {
    Name    = "${var.project_name}-postgres-params"
    Project = var.project_name
  }
}

# Enhanced monitoring IAM role
resource "aws_iam_role" "rds_enhanced_monitoring" {
  count = var.monitoring_interval > 0 ? 1 : 0
  name  = "${var.project_name}-rds-enhanced-monitoring"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "monitoring.rds.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Name    = "${var.project_name}-rds-enhanced-monitoring"
    Project = var.project_name
  }
}

resource "aws_iam_role_policy_attachment" "rds_enhanced_monitoring" {
  count      = var.monitoring_interval > 0 ? 1 : 0
  role       = aws_iam_role.rds_enhanced_monitoring[0].name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
}

# Store master credentials in AWS Secrets Manager
resource "aws_secretsmanager_secret" "rds_master" {
  name        = "${var.project_name}/rds/master"
  description = "Master credentials for ${var.project_name} RDS instance"
  
  tags = {
    Name    = "${var.project_name}-rds-master"
    Project = var.project_name
  }
}

resource "aws_secretsmanager_secret_version" "rds_master" {
  secret_id = aws_secretsmanager_secret.rds_master.id
  secret_string = jsonencode({
    username = aws_db_instance.postgres.username
    password = random_password.master_password.result
    endpoint = aws_db_instance.postgres.endpoint
    port     = aws_db_instance.postgres.port
    dbname   = aws_db_instance.postgres.db_name
  })
}

================================================================================
FILE: ./terraform/modules/database/outputs.tf
================================================================================

output "database_endpoint" {
  description = "The RDS instance endpoint"
  value       = aws_db_instance.postgres.endpoint
}

output "database_port" {
  description = "The RDS instance port"
  value       = aws_db_instance.postgres.port
}

output "database_name" {
  description = "The master database name"
  value       = aws_db_instance.postgres.db_name
}

output "security_group_id" {
  description = "The RDS security group ID"
  value       = aws_security_group.rds.id
}

output "secrets_manager_arn" {
  description = "The ARN of the secrets manager secret containing RDS credentials"
  value       = aws_secretsmanager_secret.rds_master.arn
}

================================================================================
FILE: ./terraform/modules/database/variables.tf
================================================================================

variable "project_name" {
  description = "Name of the project"
  type        = string
}

variable "vpc_id" {
  description = "VPC ID to deploy RDS in (leave empty for default VPC)"
  type        = string
  default     = ""
}

variable "availability_zones" {
  description = "List of availability zones for RDS subnet group"
  type        = list(string)
  default     = []
}

variable "allowed_security_groups" {
  description = "Security groups allowed to access RDS"
  type        = list(string)
  default     = []
}

variable "allowed_cidr_blocks" {
  description = "CIDR blocks allowed to access RDS (use sparingly)"
  type        = list(string)
  default     = []
}

variable "postgres_version" {
  description = "PostgreSQL version"
  type        = string
  default     = "17.2"
  
  validation {
    condition = can(regex("^(11|12|13|14|15|16|17)\\.[0-9]+$", var.postgres_version))
    error_message = "PostgreSQL version must be in format 'X.Y' where X is between 11-17."
  }
}

variable "db_instance_class" {
  description = "RDS instance class"
  type        = string
  default     = "db.t4g.micro"
}

variable "db_allocated_storage" {
  description = "Initial allocated storage for the database (GB)"
  type        = number
  default     = 20
}

variable "db_max_allocated_storage" {
  description = "Maximum allocated storage for the database (GB)"
  type        = number
  default     = 1000
}

variable "master_db_name" {
  description = "Name of the master database"
  type        = string
  default     = "postgres"
}

variable "master_username" {
  description = "Master database username"
  type        = string
  default     = "postgres"
}

variable "multi_az" {
  description = "Enable Multi-AZ deployment for high availability"
  type        = bool
  default     = false
}

variable "backup_retention_period" {
  description = "Backup retention period in days"
  type        = number
  default     = 7
}

variable "backup_window" {
  description = "Backup window"
  type        = string
  default     = "03:00-04:00"
  
  validation {
    condition = can(regex("^([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]$", var.backup_window))
    error_message = "Backup window must be in format 'HH:MM-HH:MM' (24-hour format)."
  }
}

variable "maintenance_window" {
  description = "Maintenance window"
  type        = string
  default     = "sun:04:00-sun:05:00"
  
  validation {
    condition = can(regex("^(sun|mon|tue|wed|thu|fri|sat):([0-1][0-9]|2[0-3]):[0-5][0-9]-(sun|mon|tue|wed|thu|fri|sat):([0-1][0-9]|2[0-3]):[0-5][0-9]$", var.maintenance_window))
    error_message = "Maintenance window must be in format 'ddd:HH:MM-ddd:HH:MM' where ddd is day of week (sun-sat)."
  }
}

variable "monitoring_interval" {
  description = "Enhanced monitoring interval (0, 1, 5, 10, 15, 30, 60)"
  type        = number
  default     = 0
  
  validation {
    condition = contains([0, 1, 5, 10, 15, 30, 60], var.monitoring_interval)
    error_message = "Monitoring interval must be one of: 0, 1, 5, 10, 15, 30, 60 seconds."
  }
}

variable "performance_insights_enabled" {
  description = "Enable Performance Insights"
  type        = bool
  default     = false
}

variable "skip_final_snapshot" {
  description = "Skip final snapshot when destroying"
  type        = bool
  default     = false
}

variable "deletion_protection" {
  description = "Enable deletion protection"
  type        = bool
  default     = true
}

variable "kms_key_id" {
  description = "KMS key ID for encryption (leave empty for default)"
  type        = string
  default     = ""
}

================================================================================
FILE: ./terraform/shared/backend.tf
================================================================================

# Backend configuration for shared infrastructure
# Use: terraform init -backend-config=../../config/shared.tfbackend

terraform {
  backend "s3" {}
}

# S3 bucket for Terraform state (create this manually first)
# resource "aws_s3_bucket" "terraform_state" {
#   bucket = "PROJECT-terraform-state"
#   
#   lifecycle {
#     prevent_destroy = true
#   }
# }
# 
# resource "aws_s3_bucket_versioning" "terraform_state" {
#   bucket = aws_s3_bucket.terraform_state.id
#   versioning_configuration {
#     status = "Enabled"
#   }
# }
# 
# resource "aws_s3_bucket_server_side_encryption_configuration" "terraform_state" {
#   bucket = aws_s3_bucket.terraform_state.id
# 
#   rule {
#     apply_server_side_encryption_by_default {
#       sse_algorithm = "AES256"
#     }
#   }
# }
# 
# resource "aws_s3_bucket_public_access_block" "terraform_state" {
#   bucket = aws_s3_bucket.terraform_state.id
# 
#   block_public_acls       = true
#   block_public_policy     = true
#   ignore_public_acls      = true
#   restrict_public_buckets = true
# }
# 
# # DynamoDB table for state locking
# resource "aws_dynamodb_table" "terraform_state_locks" {
#   name           = "terraform-state-locks"
#   billing_mode   = "PAY_PER_REQUEST"
#   hash_key       = "LockID"
# 
#   attribute {
#     name = "LockID"
#     type = "S"
#   }
# 
#   tags = {
#     Name = "Terraform State Locks"
#   }
# }

================================================================================
FILE: ./terraform/shared/main.tf
================================================================================

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.1"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

# Shared database infrastructure
module "database" {
  source = "../modules/database"
  
  project_name               = var.project_name
  vpc_id                    = var.vpc_id
  availability_zones        = var.availability_zones
  allowed_security_groups   = var.allowed_security_groups
  allowed_cidr_blocks       = var.allowed_cidr_blocks
  postgres_version          = var.postgres_version
  db_instance_class         = var.db_instance_class
  db_allocated_storage      = var.db_allocated_storage
  db_max_allocated_storage  = var.db_max_allocated_storage
  multi_az                  = var.multi_az
  backup_retention_period   = var.backup_retention_period
  monitoring_interval       = var.monitoring_interval
  performance_insights_enabled = var.performance_insights_enabled
  deletion_protection       = var.deletion_protection
  skip_final_snapshot      = var.skip_final_snapshot
}

# GitHub connection (shared across environments)
resource "aws_apprunner_connection" "github" {
  connection_name = "${var.project_name}-github-connection"
  provider_type   = "GITHUB"

  tags = {
    Name    = "${var.project_name}-github-connection"
    Project = var.project_name
  }
}

================================================================================
FILE: ./terraform/shared/outputs.tf
================================================================================

output "database_endpoint" {
  description = "The RDS instance endpoint"
  value       = module.database.database_endpoint
}

output "database_port" {
  description = "The RDS instance port"
  value       = module.database.database_port
}

output "database_security_group_id" {
  description = "The RDS security group ID"
  value       = module.database.security_group_id
}

output "secrets_manager_arn" {
  description = "The ARN of the secrets manager secret containing RDS master credentials"
  value       = module.database.secrets_manager_arn
}

output "github_connection_arn" {
  description = "The ARN of the GitHub connection"
  value       = aws_apprunner_connection.github.arn
}

output "github_connection_status" {
  description = "The status of the GitHub connection"
  value       = aws_apprunner_connection.github.status
}

================================================================================
FILE: ./terraform/shared/variables.tf
================================================================================

variable "project_name" {
  description = "Name of the project"
  type        = string
  default     = "hogtown"
}

variable "aws_region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}

variable "vpc_id" {
  description = "VPC ID to deploy RDS in (leave empty for default VPC)"
  type        = string
  default     = ""
}

variable "availability_zones" {
  description = "List of availability zones for RDS subnet group"
  type        = list(string)
  default     = []
}

variable "allowed_security_groups" {
  description = "Security groups allowed to access RDS"
  type        = list(string)
  default     = []
}

variable "allowed_cidr_blocks" {
  description = "CIDR blocks allowed to access RDS (use sparingly, prefer security groups)"
  type        = list(string)
  default     = []
}

variable "postgres_version" {
  description = "PostgreSQL version"
  type        = string
  default     = "17.2"
}

variable "db_instance_class" {
  description = "RDS instance class"
  type        = string
  default     = "db.t4g.micro"
}

variable "db_allocated_storage" {
  description = "Initial allocated storage for the database (GB)"
  type        = number
  default     = 20
}

variable "db_max_allocated_storage" {
  description = "Maximum allocated storage for the database (GB)"
  type        = number
  default     = 1000
}

variable "multi_az" {
  description = "Enable Multi-AZ deployment for high availability (recommended for production)"
  type        = bool
  default     = false
}

variable "backup_retention_period" {
  description = "Backup retention period in days"
  type        = number
  default     = 7
}

variable "monitoring_interval" {
  description = "Enhanced monitoring interval (0, 1, 5, 10, 15, 30, 60)"
  type        = number
  default     = 0
}

variable "performance_insights_enabled" {
  description = "Enable Performance Insights"
  type        = bool
  default     = false
}

variable "deletion_protection" {
  description = "Enable deletion protection"
  type        = bool
  default     = true
}

variable "skip_final_snapshot" {
  description = "Skip final snapshot when destroying (set to false for production)"
  type        = bool
  default     = false
}

