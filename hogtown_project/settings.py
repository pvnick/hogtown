"""
Django settings for hogtown_project project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

import dj_database_url
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file (for development)
# In production, App Runner automatically populates environment variables from AWS Secrets Manager
load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-default-key-change-in-production")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "yes", "on")

ALLOWED_HOSTS = (
    os.getenv("ALLOWED_HOSTS", "").split(",") if os.getenv("ALLOWED_HOSTS") else []
)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "anymail",
    "core",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "hogtown_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "hogtown_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# In production, database connection details come from individual environment variables
# populated by App Runner from AWS Secrets Manager
def get_database_url():
    """Construct database URL from environment variables."""
    db_host = os.getenv("DB_HOST")
    db_port = os.getenv("DB_PORT")
    db_name = os.getenv("DB_NAME")
    db_username = os.getenv("DB_USERNAME")
    db_password = os.getenv("DB_PASSWORD")

    if all([db_host, db_port, db_name, db_username, db_password]):
        return f"postgresql://{db_username}:{db_password}@{db_host}:{db_port}/{db_name}"

    # Fall back to DATABASE_URL or SQLite for development
    return os.getenv("DATABASE_URL", f"sqlite:///{BASE_DIR}/db.sqlite3")


DATABASES = {
    "default": dj_database_url.parse(
        get_database_url(),
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_TZ = True

# Custom user model
AUTH_USER_MODEL = "core.User"

# Custom authentication backend
AUTHENTICATION_BACKENDS = [
    "core.backends.ApprovedUserBackend",
]

# Login/logout URLs
LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/portal/"
LOGOUT_REDIRECT_URL = "/"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Prosopo Procaptcha settings
PROSOPO_SITE_KEY = os.getenv("PROSOPO_SITE_KEY", "your-site-key-here")
PROSOPO_SECRET_KEY = os.getenv("PROSOPO_SECRET_KEY", "your-secret-key-here")
PROSOPO_VERIFY_URL = os.getenv(
    "PROSOPO_VERIFY_URL", "https://api.prosopo.io/siteverify"
)

# Email settings
EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "noreply@hogtowncatholic.org")

# Email service credentials (AWS SES)
EMAIL_SERVICE_ACCESS_KEY_ID = os.getenv("EMAIL_SERVICE_ACCESS_KEY_ID")
EMAIL_SERVICE_SECRET_ACCESS_KEY = os.getenv("EMAIL_SERVICE_SECRET_ACCESS_KEY")
EMAIL_SERVICE_AWS_REGION = os.getenv("EMAIL_SERVICE_AWS_REGION", "us-east-1")

if EMAIL_SERVICE_ACCESS_KEY_ID and EMAIL_BACKEND == "anymail.backends.amazon_ses.EmailBackend":
    ANYMAIL = {
        "AMAZON_SES_ACCESS_KEY_ID": EMAIL_SERVICE_ACCESS_KEY_ID,
        "AMAZON_SES_SECRET_ACCESS_KEY": EMAIL_SERVICE_SECRET_ACCESS_KEY,
        "AMAZON_SES_REGION": EMAIL_SERVICE_AWS_REGION,
    }
